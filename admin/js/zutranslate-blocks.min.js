var zutranslate_blocks = (function (exports) {
  'use strict';

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);

      if (enumerableOnly) {
        symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }

      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;

    var _s, _e;

    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  // WordPress dependencies
  var __$1 = wp.i18n.__; // className,
  // name,
  // title,
  // icon,
  // slot         kind of SlotFills which will be used:
  //              'setting'       - PluginDocumentSettingPanel
  //              'sidebar'       - PluginSidebar
  //              'status'        - PluginPostStatusInfo
  //	            '<slot-name>'   - Panel inside sidebar Slot with this name,
  //                                NB! attribute 'slot' should be equal to the name when Slot was added
  // moreItem,
  // moreTitle,
  // moreIcon,
  // allowEmptyValues,        when false and metaValues are empty (undefined or null) - nothing will be rendered
  // initialOpen

  var metadata = {
    slot: 'setting',
    name: 'zu-language',
    title: __$1('Language', 'zu-translate')
  };

  // WordPress dependencies
  var _$1 = lodash;
  var select$4 = wp.data.select; // Zukit dependencies

  var _wp$zukit$utils = wp.zukit.utils,
      externalData = _wp$zukit$utils.externalData,
      getExternalData = _wp$zukit$utils.getExternalData,
      mergeClasses = _wp$zukit$utils.mergeClasses,
      emptyGif = _wp$zukit$utils.emptyGif;
      _wp$zukit$utils.toJSON;
      _wp$zukit$utils.simpleMarkdown; // Import debug object and make it available from global scope
  window.Zubug = _objectSpread2({}, wp.zukit.debug || {}); // Internal dependencies
  // import { qtranxj_split, qtranxj_get_split_blocks, qtranxj_split_blocks } from './qblocks.js';
  // перед вызовами 'getExternalData' нужно один раз вызвать 'externalData'

  externalData('zutranslate_blocks_data');
  var supportedData = getExternalData('supported', {}); // const delimiters = ['[]', '{}', '<!-- -->'];

  var supportedBlocks = _$1.keys(supportedData);

  var getDebug = function getDebug(enable) {
    return enable ? Zubug : _$1.transform(_$1.keys(Zubug), function (acc, key) {
      return acc[key] = _$1.noop;
    }, {});
  };
  function getTranslatedAtts(name) {
    return _$1.castArray(_$1.get(supportedData, [name, 'atts']));
  }
  function getTranslated(name, attributes) {
    var translatedKeys = getTranslatedAtts(name);

    var translatedAtts = _$1.reduce(translatedKeys, function (values, attr) {
      values.push(_$1.get(attributes, attr, ''));
      return values;
    }, []); // _.pick(attributes, translatedKeys);


    return [_$1.join(translatedKeys, ','), translatedAtts];
  }
  function isSupported(name) {
    return _$1.includes(supportedBlocks, name);
  } // selector which returns an array containing all block client IDs in the editor.
  // Optionally accepts a root client ID of the block list for which
  // the order should be returned, defaulting to the top-level block order.

  var _select$2 = select$4('core/block-editor'),
      getBlockOrder = _select$2.getBlockOrder; // recursively collect all IDs of 'editable blocks' on the page.


  function getEditorBlocks() {
    var ids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    if (_$1.isNil(ids)) ids = getBlockOrder();
    return _$1.reduce(ids, function (blocks, id) {
      var innerIds = getBlockOrder(id);
      var nestedIds = innerIds.length ? getEditorBlocks(innerIds) : innerIds;
      return [].concat(_toConsumableArray(blocks), _toConsumableArray(nestedIds));
    }, ids);
  } // const { getEditedEntityRecord, getEntityRecordEdits } = select('core');
  // editEntityRecord
  // deleteEntityRecord
  // const { hasChangedContent, hasNonPostEntityChanges } = select('core/editor');
  // isEditedPostEmpty
  // isEditedPostDirty
  // isAutosavingPost
  // isCleanNewPost
  // isEditedPostAutosaveable
  // Actions
  // DOM manipulations ----------------------------------------------------------]

  function getInputValue(selector) {
    var _document$querySelect, _document$querySelect2;

    return (_document$querySelect = (_document$querySelect2 = document.querySelector(selector)) === null || _document$querySelect2 === void 0 ? void 0 : _document$querySelect2.value) !== null && _document$querySelect !== void 0 ? _document$querySelect : null;
  }
  function addInputListener(selector, callback) {
    var addListener = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    var el = document.querySelector(selector); // React chose to make 'onChange' behave like 'onInput' does
    // it does fire when there's a change, just not until the input also loses focus
    // that's why we are adding a listener to the 'input' event and not to the 'change' event

    if (el) {
      if (addListener) el.addEventListener('input', callback);else el.removeEventListener('input', callback);
    }
  } // Language Session Storage ---------------------------------------------------]
  // the edit language corresponds to the current LSB selection
  // or the main admin language for single mode

  var keyEditLanguage = 'qtranslate-xt-admin-edit-language';
  function getSessionLang() {
    return sessionStorage.getItem(keyEditLanguage);
  }
  function storeSessionLang(lang) {
    try {
      sessionStorage.setItem(keyEditLanguage, lang);
    } catch (e) {
      console.warn("Failed to store \"".concat(keyEditLanguage, "\"=").concat(lang, " with sessionStorage"), e);
    }
  }

  var _excluded = ["title", "lang", "onClick", "withPanel"];
  // WordPress dependencies
  var _lodash$8 = lodash,
      map = _lodash$8.map,
      pick$1 = _lodash$8.pick;
  var __ = wp.i18n.__;
  var _wp$components = wp.components,
      PanelBody = _wp$components.PanelBody,
      Path = _wp$components.Path,
      SVG = _wp$components.SVG;
  var useCallback$2 = wp.element.useCallback; // Zukit dependencies

  var _wp$zukit$components = wp.zukit.components,
      SelectItemControl = _wp$zukit$components.SelectItemControl,
      TitleIndicator = _wp$zukit$components.TitleIndicator; // Internal dependencies
  // const { language_config: config, flag_location: flagPath } = window.qTranslateConfig ?? {};

  var config = getExternalData('config', []);
  var flagPath = getExternalData('location', []);
  var langOptions = map(config, function (data, key) {
    return {
      value: key,
      label: data.name,
      flag: data.flag
    };
  });
  var withFlags = getExternalData('flags', false);
  var langPrefix = 'components-zu-lang-control';
  var tick = /*#__PURE__*/React.createElement(SVG, {
    width: "24",
    height: "24",
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/React.createElement(Path, {
    d: "M18.3 5.6L9.9 16.9l-4.6-3.4-.9 1.2 5.8 4.3 9.3-12.6z"
  }));

  var LangIndicator = function LangIndicator(_ref) {
    var title = _ref.title,
        lang = _ref.lang,
        colored = _ref.colored;
    return /*#__PURE__*/React.createElement(TitleIndicator, {
      title: title !== null && title !== void 0 ? title : __('Language', 'zu-translate'),
      value: lang,
      colored: colored
    });
  };

  var LangControl = function LangControl(_ref2) {
    var title = _ref2.title,
        lang = _ref2.lang,
        onClick = _ref2.onClick,
        withPanel = _ref2.withPanel,
        additionalProps = _objectWithoutProperties(_ref2, _excluded);

    var langValue = useCallback$2(function (value, label, style, more) {
      return /*#__PURE__*/React.createElement("span", {
        className: mergeClasses('__lang', {
          '__with-flags': withFlags
        }),
        style: style
      }, withFlags && /*#__PURE__*/React.createElement("img", {
        className: "__flag",
        src: more.flag ? flagPath + more.flag : emptyGif
      }), label, lang === value ? tick : null);
    }, [lang]);
    var langControl = /*#__PURE__*/React.createElement(SelectItemControl, {
      className: langPrefix,
      options: langOptions,
      selectedItem: lang,
      onClick: onClick,
      transformValue: langValue
    });

    if (withPanel) {
      var titleWithIndicator = /*#__PURE__*/React.createElement(LangIndicator, {
        title: title,
        lang: lang
      });
      var panelProps = pick$1(additionalProps, ['buttonProps', 'className', 'icon', 'opened', 'scrollAfterOpen', 'initialOpen', 'onToggle']);
      return /*#__PURE__*/React.createElement(PanelBody, _extends({
        title: titleWithIndicator
      }, panelProps), langControl);
    }

    return langControl;
  };

  LangControl.Panel = function (props) {
    return /*#__PURE__*/React.createElement(LangControl, _extends({
      withPanel: true
    }, props));
  };

  LangControl.Indicator = LangIndicator;

  // Utilities for qTranslate blocks
  var langCodeFormat = getExternalData('format', '');
  var languageConfig = getExternalData('config', []);
  var qtranxj_get_split_blocks = function qtranxj_get_split_blocks(text) {
    var regex = '(<!--:lang-->|<!--:-->|\\[:lang]|\\[:]|{:lang}|{:})'.replace(/lang/g, langCodeFormat);
    var splitRegex = new RegExp(regex, "gi"); // Most browsers support RegExp.prototype[@@split]()... except IE

    if ('a~b'.split(/(~)/).length === 3) {
      return text.split(splitRegex);
    } // compatibility for unsupported engines


    var start = 0,
        arr = [];
    var result;

    while ((result = splitRegex.exec(text)) != null) {
      arr.push(text.slice(start, result.index));
      if (result.length > 1) arr.push(result[1]);
      start = splitRegex.lastIndex;
    }

    if (start < text.length) arr.push(text.slice(start));
    if (start === text.length) arr.push(''); // delimiter at the end

    return arr;
  };
  var qtranxj_split = function qtranxj_split(text) {
    var blocks = qtranxj_get_split_blocks(text);
    return qtranxj_split_blocks(blocks);
  };
  var qtranxj_split_blocks = function qtranxj_split_blocks(blocks) {
    var result = new Object();

    for (var _lang in languageConfig) {
      result[_lang] = '';
    }

    if (!blocks || !blocks.length) return result;

    if (blocks.length === 1) {
      // no language separator found, enter it to all languages
      var b = blocks[0];

      for (var _lang2 in languageConfig) {
        result[_lang2] += b;
      }

      return result;
    }

    var clang_regex = new RegExp('<!--:(lang)-->'.replace(/lang/g, langCodeFormat), 'gi');
    var blang_regex = new RegExp('\\[:(lang)]'.replace(/lang/g, langCodeFormat), 'gi');
    var slang_regex = new RegExp('{:(lang)}'.replace(/lang/g, langCodeFormat), 'gi');
    var lang = false;
    var matches;

    for (var i = 0; i < blocks.length; ++i) {
      var _b = blocks[i];
      if (!_b.length) continue;
      matches = clang_regex.exec(_b);
      clang_regex.lastIndex = 0;

      if (matches != null) {
        lang = matches[1];
        continue;
      }

      matches = blang_regex.exec(_b);
      blang_regex.lastIndex = 0;

      if (matches != null) {
        lang = matches[1];
        continue;
      }

      matches = slang_regex.exec(_b);
      slang_regex.lastIndex = 0;

      if (matches != null) {
        lang = matches[1];
        continue;
      }

      if (_b === '<!--:-->' || _b === '[:]' || _b === '{:}') {
        lang = false;
        continue;
      }

      if (lang) {
        if (!result[lang]) result[lang] = _b;else result[lang] += _b;
        lang = false;
      } else {
        // keep neutral text
        for (var key in result) {
          result[key] += _b;
        }
      }
    }

    return result;
  };

  // WordPress dependencies
  var _ = lodash; // Internal dependencies
  function hasRaw(ref) {
    var _ref$current;

    return !!(ref !== null && ref !== void 0 && (_ref$current = ref.current) !== null && _ref$current !== void 0 && _ref$current.raw);
  }
  function getLangContent(raw, lang) {
    var _blocks$lang;

    var blocks = _.isArray(raw) ? qtranxj_split_blocks(raw) : getTranslatedBlocks(raw);
    return (_blocks$lang = blocks[lang]) !== null && _blocks$lang !== void 0 ? _blocks$lang : '';
  }
  function createRawContent(lang, values, translatedAtts) {
    var maybeFixRaw = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    var del = getDefaultDelimter();
    var separator = getSeparator();
    var rawItems = emptyRawContent(values.length, false); // if RAW was created for wrong amount of attributes

    if (maybeFixRaw) {
      var items = _.split(maybeFixRaw, separator);

      if (values.length !== items.length) {
        maybeFixRaw = fixRawContent(lang, values, separator, maybeFixRaw);
      }

      return [maybeFixRaw, {}];
    } // check if any of the attributes already contains a RAW block


    var prevRaw = _.reduce(values, function (foundRaw, value) {
      return foundRaw === false ? hasRawBlocks(value) ? value : false : foundRaw;
    }, false);
    // NOTE: the option when more than one attribute contained RAW is not processed
    // this seems to be impossible - before this plugin the RAW was not split by attributes
    // return the new RAW and attribute content for the current language

    if (prevRaw) {
      var index = _.indexOf(values, prevRaw);

      var atts = _.split(translatedAtts !== null && translatedAtts !== void 0 ? translatedAtts : '', ',');

      var newItems = updateRawContent(rawItems, lang, values, {
        del: testDelimters(prevRaw),
        separator: separator,
        join: false
      });

      _.set(newItems, index, prevRaw);

      return [_.join(newItems, separator), _defineProperty({}, atts[index], getLangContent(prevRaw, lang))];
    } // for the newly created RAW, save the current attribute values in the current language section


    return [updateRawContent(rawItems, lang, values, {
      del: del,
      separator: separator
    }), {}];
  }
  function updateRawContent(raw, lang, values) {
    var _$get, _$get2;

    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    if (lang === undefined) return raw;
    var del = (_$get = _.get(options, 'del')) !== null && _$get !== void 0 ? _$get : testDelimters(raw);
    var separator = (_$get2 = _.get(options, 'separator')) !== null && _$get2 !== void 0 ? _$get2 : getSeparator(del);

    var joinItems = _.get(options, 'join', true);

    var items = _.isArray(raw) ? raw : _.split(raw, separator);

    var rawItems = _.reduce(items, function (newRaw, rawItem, index) {
      var blocks = getTranslatedBlocks(rawItem);

      if (values[index] !== undefined) {
        blocks[lang] = values[index];

        var withMarkers = _.map(blocks, function (text, ln) {
          return marker(del, ln, text);
        });

        newRaw[index] = _.join([].concat(_toConsumableArray(withMarkers), [marker(del)]), '');
      }

      return newRaw;
    }, []);
    return joinItems ? _.join(rawItems, separator) : rawItems;
  } // fix if RAW was created for wrong amount of attributes

  function maybeFixRawContent(prevRaw, lang, values) {
    var separator = getSeparator();

    var items = _.split(prevRaw, separator);

    if (values.length !== items.length) {
      var fixedRaw = fixRawContent(lang, values, separator, prevRaw);
      return prevRaw !== fixedRaw ? fixedRaw : false;
    }

    return false;
  }
  function switchContent(raw, lang, translatedAtts) {
    var atts = _.split(translatedAtts, ',');

    var rawItems = splitRawContent(raw);
    return _.reduce(atts, function (attributes, attr, index) {
      var value = getLangContent(rawItems[index], lang);

      _.set(attributes, attr, value);
      return attributes;
    }, {});
  } // internal helpers -----------------------------------------------------------]

  var delimiters = ['[]', '{}', '<!-- -->'];

  function hasRawBlocks(text) {
    if (!_.isString(text)) return false;
    var blocks = qtranxj_get_split_blocks(text); // no language separator found - there are no translations

    return (blocks === null || blocks === void 0 ? void 0 : blocks.length) > 1;
  }

  function emptyRawContent(itemCount) {
    var joinItems = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var del = getDefaultDelimter();
    var separator = getSeparator(del);
    var blocks = getTranslatedBlocks('');

    var withMarkers = _.map(blocks, function (text, ln) {
      return marker(del, ln, text);
    });

    var emptyRaw = _.join([].concat(_toConsumableArray(withMarkers), [marker(del)]), '');

    var rawItems = _.fill(_.range(0, itemCount), emptyRaw);

    return joinItems ? _.join(rawItems, separator) : rawItems;
  }

  function splitRawContent(raw) {
    var del = testDelimters(raw);
    var separator = getSeparator(del);
    return _.split(raw, separator);
  }

  function getTranslatedBlocks(raw) {
    return _.isString(raw) ? qtranxj_split(raw) : [];
  } // if RAW was created for wrong amount of attributes


  function fixRawContent(lang, values, separator, currentRaw) {
    var raw = emptyRawContent(values.length);

    _.forEach(values, function (val, index) {
      if (val !== '' && val !== undefined) {
        if (_.includes(currentRaw, val)) {
          var rawItems = _.split(raw, separator);

          rawItems[index] = currentRaw;
          raw = _.join(rawItems, separator);
        } else {
          raw = updateRawContent(raw, lang, values, {
            separator: separator
          });
        }
      }
    });

    return raw;
  } // 'delimter' is what separates blocks of text in different languages


  function getDefaultDelimter() {
    return testDelimters();
  } // 'separator' is what separates RAW blocks for different attributes


  function getSeparator(del) {
    return marker(del !== null && del !== void 0 ? del : getDefaultDelimter(), null, null, true);
  }

  function splitInHalf(s) {
    var str = String(s);
    var middle = Math.floor(str.length / 2);
    return [str.substr(0, middle).trim(), str.substr(middle).trim()];
  }

  function testDelimters(s) {
    var blockDel = splitInHalf(delimiters[0]);

    if (_.isString(s)) {
      _.forEach(delimiters, function (d) {
        var del = splitInHalf(d);
        var regex = new RegExp(marker(del), 'gi');

        if (regex.exec(s) !== null) {
          blockDel = del;
          return false;
        }
      });
    }

    return blockDel;
  }

  function marker(del) {
    var lang = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var text = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var split = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    return "".concat(del[0]).concat(split ? ',' : ':').concat(lang !== null && lang !== void 0 ? lang : '').concat(del[1]).concat(text !== null && text !== void 0 ? text : '');
  }

  // WordPress dependencies
  var _lodash$7 = lodash,
      keys$3 = _lodash$7.keys,
      isEqual = _lodash$7.isEqual,
      get = _lodash$7.get,
      omit = _lodash$7.omit,
      without = _lodash$7.without;
  var registerStore = wp.data.registerStore; // Internal dependencies
  var supportSession = getExternalData('session', false);
  var sessionLang = supportSession ? getSessionLang() : null;
  var editorLang = sessionLang !== null && sessionLang !== void 0 ? sessionLang : getExternalData('lang', 'en');
  var enableDebug$5 = getExternalData('debug.raw_store', false);
  var debug$5 = getDebug(enableDebug$5); // Create and register Zu Translate store -------------------------------------]

  var supportedAtts = {
    title: '.editor-post-title__input',
    excerpt: '.editor-post-excerpt__textarea .components-textarea-control__input'
  };
  var supportedKeys = keys$3(supportedAtts);
  var ZUTRANSLATE_STORE = 'zutranslate/core';
  var TYPES = {
    SET_LANG: 'SET_LANG',
    SET_RAW: 'SET_RAW',
    UPDATE_RAW: 'UPDATE_RAW',
    SET_HOOK: 'SET_HOOK',
    REMOVE_HOOK: 'REMOVE_HOOK',
    WATCH: 'WATCH',
    UNWATCH: 'UNWATCH'
  };
  var initialState = {
    lang: editorLang,
    hooks: {},
    watched: []
  };

  function storeReducer() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
    var action = arguments.length > 1 ? arguments[1] : undefined;
    var type = action.type,
        key = action.key,
        value = action.value;
    var prevValue = get(state, key, '');
    var lang = get(state, 'lang', ''); // use an interim value to avoid unnecessary rendering
    // when the data does not change after 'action'

    var interim = state,
        newRaw = null;

    switch (type) {
      case TYPES.SET_RAW:
        interim = _objectSpread2(_objectSpread2({}, state), {}, _defineProperty({}, key, value));
        break;

      case TYPES.UPDATE_RAW:
        newRaw = updateRawContent(prevValue, lang, [value]);
        interim = _objectSpread2(_objectSpread2({}, state), {}, _defineProperty({}, key, newRaw));
        break;

      case TYPES.SET_LANG:
        interim = _objectSpread2(_objectSpread2({}, state), {}, {
          lang: value
        });
        break;

      case TYPES.SET_HOOK:
        interim = _objectSpread2(_objectSpread2({}, state), {}, {
          hooks: _objectSpread2(_objectSpread2({}, state.hooks), {}, _defineProperty({}, key, value))
        });
        break;

      case TYPES.REMOVE_HOOK:
        interim = _objectSpread2(_objectSpread2({}, state), {}, {
          hooks: omit(state.hooks, key)
        });
        break;

      case TYPES.WATCH:
        interim = _objectSpread2(_objectSpread2({}, state), {}, {
          watched: [].concat(_toConsumableArray(state.watched), [value])
        });
        break;

      case TYPES.UNWATCH:
        interim = _objectSpread2(_objectSpread2({}, state), {}, {
          watched: without(state.watched, value)
        });
        break;
    }

    var hasChanged = !isEqual(state, interim);
    debug$5.data({
      type: type,
      key: key,
      value: value,
      prev: state,
      state: hasChanged ? interim : '=prev'
    }, hasChanged ? 'effective change' : 'same as the previous');
    return hasChanged ? interim : state;
  }

  var storeActions = {
    setRaw: function setRaw(key, value) {
      return {
        type: TYPES.SET_RAW,
        key: key,
        value: value
      };
    },
    updateRaw: function updateRaw(key, value) {
      return {
        type: TYPES.UPDATE_RAW,
        key: key,
        value: value
      };
    },
    setLang: function setLang(value) {
      if (supportSession) storeSessionLang(value);
      return {
        type: TYPES.SET_LANG,
        value: value
      };
    },
    setHook: function setHook(id, hook) {
      return {
        type: TYPES.SET_HOOK,
        key: id,
        value: hook
      };
    },
    removeHook: function removeHook(id) {
      return {
        type: TYPES.REMOVE_HOOK,
        key: id
      };
    },
    addWatched: function addWatched(id) {
      return {
        type: TYPES.WATCH,
        value: id
      };
    },
    removeWatched: function removeWatched(id) {
      return {
        type: TYPES.UNWATCH,
        value: id
      };
    }
  };
  var store = registerStore(ZUTRANSLATE_STORE, {
    reducer: storeReducer,
    actions: storeActions,
    selectors: {
      getRaw: function getRaw(state, key) {
        return get(state, key);
      },
      getLang: function getLang(state) {
        return get(state, 'lang');
      },
      getHooks: function getHooks(state) {
        return get(state, 'hooks');
      },
      getWatched: function getWatched(state) {
        return get(state, 'watched');
      }
    },
    controls: {}
  });
  var subscribe$1 = store.subscribe;

  // WordPress dependencies
  var _lodash$6 = lodash,
      keys$2 = _lodash$6.keys,
      forEach$2 = _lodash$6.forEach,
      includes$3 = _lodash$6.includes,
      some = _lodash$6.some,
      has$1 = _lodash$6.has,
      set = _lodash$6.set;
  var usePrevious = wp.compose.usePrevious;
  var useEffect$2 = wp.element.useEffect;
  var _wp$data$2 = wp.data,
      select$3 = _wp$data$2.select,
      dispatch$2 = _wp$data$2.dispatch;
  var _wp = wp,
      apiFetch = _wp.apiFetch; // Internal dependencies
  // import { notifySync } from './edited-entity.js'; // beforeLanguageSwitch, afterLanguageSwitch,

  var enableDebug$4 = getExternalData('debug.sync_blocks', false); // const activateSync = getExternalData('sync', false);

  var debug$4 = getDebug(enableDebug$4); // Custom hooks & helpers for 'store' -----------------------------------------]

  function getLang() {
    return select$3(ZUTRANSLATE_STORE).getLang();
  }
  function getRaw(key) {
    return select$3(ZUTRANSLATE_STORE).getRaw(key);
  } // export function getHooks() {
  // 	return select(ZUTRANSLATE_STORE).getHooks();
  // }

  function setRaw(attribute, value) {
    var _dispatch = dispatch$2(ZUTRANSLATE_STORE),
        setRawValue = _dispatch.setRaw;

    setRawValue(attribute, value);
  }
  function updateRaw(attribute, value) {
    var _dispatch2 = dispatch$2(ZUTRANSLATE_STORE),
        updateRawValue = _dispatch2.updateRaw;

    updateRawValue(attribute, value);
  }
  function addHook(id, hook) {
    var hooks = select$3(ZUTRANSLATE_STORE).getHooks();

    if (!has$1(hooks, id)) {
      dispatch$2(ZUTRANSLATE_STORE).setHook(id, hook);
    } // setHook(id, hook);

  }
  function removeHook(id) {
    dispatch$2(ZUTRANSLATE_STORE).removeHook(id);
  } // export function addWatched(id, isOriginator = false) {
  // 	const { addWatched } = dispatch(ZUTRANSLATE_STORE);
  // 	addWatched(id);
  // 	debug.infoWithId(id, `-!{Component Watched}${isOriginator ? ' [originator]' : ''}`);
  // }
  //
  // export function removeWatched(id) {
  // 	const { removeWatched } = dispatch(ZUTRANSLATE_STORE);
  // 	removeWatched(id);
  // 	debug.infoWithId(id, '-*{Component unWatched}');
  // }
  // custom hook which get dispatch method for 'lang' change

  function changeLang(value) {
    var _dispatch3 = dispatch$2(ZUTRANSLATE_STORE),
        setLang = _dispatch3.setLang;

    var currentLang = getLang();

    if (value !== currentLang) {
      // beforeLanguageSwitch(currentLang);
      setLang(value);
    }
  }
  function useOnLangChange(clientId, callback) {
    var editorLang = getLang();
    var prev = usePrevious(editorLang); // if the previous language value is defined and not equal to the current value - call the 'callback' function

    useEffect$2(function () {
      if (prev !== undefined && prev !== editorLang) {
        callback(editorLang); // removeWatched(clientId);
      }
    }, [prev, editorLang, clientId, callback]);
    return editorLang;
  }
  function useLangHook(clientId, updater) {
    useEffect$2(function () {
      // const { setHook, removeHook } = dispatch(ZUTRANSLATE_STORE);
      addHook(clientId, updater);
      return function () {
        return removeHook(clientId);
      }; // 'clientId' and 'updater' never change, 'useEffect' will be called only on mounting and unmounting the component
      // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
  } // call all registered hooks besides associated with 'clientId'
  // this will lead to switching language for blocks associated with these hooks
  // export function syncBlocks(clientId) {
  // 	notifySync('before', activateSync);
  // 	addWatched(clientId, true);
  // 	if(activateSync) {
  // 		const hooks = getHooks();
  // 		debug.infoWithId(clientId, '-Sync initiated', { hookCount: Object.keys(hooks).length, hooks });
  // 		forEach(hooks, (hook, id) => {
  // 			if(id !== clientId) {
  // 				// always add watched ID before calling the hook, because inside the hook may be logic
  // 				// to remove this ID from the 'watched' list
  // 				// for example, in the language switch logic for 'non-block' attributes
  // 				addWatched(id);
  // 				hook();
  // 			}
  // 		});
  // 	}
  // 	notifySync('after', activateSync);
  // 	// afterLanguageSwitch(clientId, activateSync);
  // }
  // Hook on the post saving ----------------------------------------------------]

  var _select$1 = select$3('core/editor'),
      isSavingPost$1 = _select$1.isSavingPost;

  apiFetch.use(function (options, next) {
    if (isSavingPost$1() && includes$3(['PUT', 'POST'], options.method)) {
      var data = options.data;

      var newOptions = _objectSpread2(_objectSpread2({}, options), {}, {
        data: _objectSpread2(_objectSpread2({}, data), {}, {
          editor_lang: getLang()
        })
      });

      if (some(keys$2(data), function (val) {
        return includes$3(supportedKeys, val);
      })) {
        forEach$2(supportedKeys, function (attr) {
          if (has$1(data, attr)) {
            var rawValue = getRaw(attr);
            set(newOptions, ['data', attr], rawValue);
          }
        });
      }

      debug$4.data({
        newOptions: newOptions
      });
      return next(newOptions);
    }

    return next(options);
  });

  // WordPress dependencies
  var _lodash$5 = lodash,
      keys$1 = _lodash$5.keys,
      includes$2 = _lodash$5.includes,
      forEach$1 = _lodash$5.forEach;
  var _wp$data$1 = wp.data,
      select$2 = _wp$data$1.select,
      dispatch$1 = _wp$data$1.dispatch; // Internal dependencies
  var enableDebug$3 = getExternalData('debug.sync_blocks', false);
  var activateSync$1 = getExternalData('sync', false);
  var cleanUnsaved = getExternalData('unsaved', false);
  var debug$3 = getDebug(enableDebug$3);
  var rootClientId = 'rawRoot'; // Helpers for 'store' --------------------------------------------------------]
  // we need to know when all changes are committed in 'Entity'
  // to do this, we add a block ID to the 'watched' list before the changes
  // and then remove this ID when the changes were made
  // when the 'watched' list becomes empty - all changes were are committed

  function getWatched() {
    return select$2(ZUTRANSLATE_STORE).getWatched();
  }

  function addWatched(id) {
    var isOriginator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    var _dispatch = dispatch$1(ZUTRANSLATE_STORE),
        addWatched = _dispatch.addWatched;

    debug$3.infoWithId(id, "-+{Component Watched}".concat(isOriginator ? ' [originator]' : ''));
    addWatched(id);
  }

  function removeWatched(id) {
    var _dispatch2 = dispatch$1(ZUTRANSLATE_STORE),
        removeWatched = _dispatch2.removeWatched; // удалить после тестов


    var watched = getWatched();
    if (!includes$2(watched, id)) debug$3.infoWithId(id, '-!{Repeated ID removal!}');
    debug$3.infoWithId(id, '-*{Component unWatched}');
    removeWatched(id);
  }

  function getHooks() {
    return select$2(ZUTRANSLATE_STORE).getHooks();
  } // Sync blocks ----------------------------------------------------------------]
  // store some 'Entity' states to synchronize blocks and reset 'dirty' editing state


  var entityState = {
    isPostDirty: false,
    isTracking: false,
    shouldResetEdits: false
  }; // call all registered hooks besides associated with 'clientId'
  // this will lead to switching language for blocks associated with these hooks

  function syncBlocks(clientId) {
    notifySync('before', activateSync$1);
    addWatched(clientId, true);

    if (activateSync$1) {
      var hooks = getHooks();
      forEach$1(hooks, function (hook, id) {
        if (id !== clientId) {
          // always add watched ID before calling the hook, because inside the hook may be logic
          // to remove this ID from the 'watched' list
          // for example, in the language switch logic for 'non-block' attributes
          addWatched(id);
          hook();
        }
      });
    }

    notifySync('after', activateSync$1);
  }
  function syncCompleted(id) {
    removeWatched(id !== null && id !== void 0 ? id : rootClientId);
  }

  function notifySync(when, isEnabled) {
    debugSync(when, isEnabled);

    if (cleanUnsaved) {
      if (when === 'before' && !entityState.isPostDirty) {
        entityState.shouldResetEdits = true;
      }

      if (when === 'after' && entityState.shouldResetEdits) {
        entityState.isTracking = true;
      }
    }
  } // Internal debug helpers -----------------------------------------------------]


  function debugSync(when, isEnabled) {
    var isPostDirty = entityState.isPostDirty,
        shouldResetEdits = entityState.shouldResetEdits;
    var isBefore = when === 'before';
    var status = isPostDirty ? 'dirty' : 'clean';
    var option = isEnabled ? 'enabled' : 'disabled';
    var action = "".concat(isBefore ? '?' : '#', "{").concat(isBefore ? 'initiated' : 'completed', "}");
    var reset = cleanUnsaved ? 'reset is ' + (shouldResetEdits ? '{enabled}' : '{disabled}') : 'clean "unsaved" is {disabled}';
    var after = isBefore ? "Hooks count [".concat(keys$1(getHooks()).length, "]") : reset;
    var info = "-".concat(action, " Sync Blocks [").concat(option, "] - Post is {").concat(status, "}, ").concat(after);
    debug$3.info(info);
  }

  // WordPress dependencies
  var _lodash$4 = lodash,
      isEmpty = _lodash$4.isEmpty,
      keys = _lodash$4.keys,
      pick = _lodash$4.pick;
  var _wp$data = wp.data,
      subscribe = _wp$data.subscribe,
      select$1 = _wp$data.select,
      dispatch = _wp$data.dispatch; // Internal dependencies

  var _select = select$1('core'),
      getEntityRecordNonTransientEdits = _select.getEntityRecordNonTransientEdits,
      getEditedEntityRecord = _select.getEditedEntityRecord;

  var _dispatch = dispatch('core'),
      editEntityRecord = _dispatch.editEntityRecord,
      receiveEntityRecords = _dispatch.receiveEntityRecords;

  var _select2 = select$1('core/editor'),
      isEditedPostDirty = _select2.isEditedPostDirty,
      getCurrentPostType = _select2.getCurrentPostType,
      getCurrentPostId = _select2.getCurrentPostId;

  var _select3 = select$1('core/editor'),
      isSavingPost = _select3.isSavingPost;

  var enableDebug$2 = getExternalData('debug.edited_entity', false);
  var debug$2 = getDebug(enableDebug$2); // Attributes of the Entity ---------------------------------------------------]

  function getEntityAttributes() {
    var onlyAtts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var postType = getCurrentPostType();
    var postId = getCurrentPostId();
    var entityRecord = getEditedEntityRecord('postType', postType, postId);
    return pick(entityRecord, onlyAtts !== null && onlyAtts !== void 0 ? onlyAtts : supportedKeys);
  }
  function updateEntityAttributes(edits) {
    if (!isEmpty(edits)) {
      debug$2.info('-+{updated} Entity Attributes', edits); // collectEdits(edits);

      var postType = getCurrentPostType();
      var postId = getCurrentPostId();
      editEntityRecord('postType', postType, postId, edits);
      syncCompleted();
    }
  } // Maintaining 'non-modified' content -----------------------------------------]

  subscribe(function () {
    if (isEditedPostDirty()) {
      if (!entityState.isPostDirty) {
        entityState.isPostDirty = true;
        debugPostStatus();
      }
    } else {
      if (entityState.isPostDirty) {
        entityState.isPostDirty = false;
        debugPostStatus();
      }
    }
  });
  subscribe$1(function () {
    // we need to wait when all changes are committed in 'Entity'
    // otherwise we will start 'reset' ahead of time
    if (entityState.isTracking && changesAreCommitted()) {
      entityState.isTracking = false;
      debug$2.info('-#RAW store tracking is {completed}', entityState);
      resetEdits();
    }
  });

  function changesAreCommitted() {
    // const watched = getWatched();
    return getWatched().length === 0;
  }

  function getNonTransientEdits() {
    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var recordId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var postType = name !== null && name !== void 0 ? name : getCurrentPostType();
    var postId = recordId !== null && recordId !== void 0 ? recordId : getCurrentPostId();
    return getEntityRecordNonTransientEdits('postType', postType, postId);
  }

  function resetEdits() {
    var nonTransientEdits = getNonTransientEdits();
    debug$2.info('-?{resetEdits}', keys(nonTransientEdits));

    if (!isEmpty(nonTransientEdits)) {
      emulateSavingPost(nonTransientEdits);
      entityState.shouldResetEdits = false;
    }
  } // For emulation, we repeat what the WordPress is doing after saving the post
  // it calls action 'receiveEntityRecords' with data received from the server
  // we have no data from the server, but we just take the latest changes from Entity
  // when we return the data that are equal to the latest changes,
  // then the 'Data Store' considers that the data has been successfully saved and resets the accumulated changes


  function emulateSavingPost(postEdits) {
    var postType = getCurrentPostType();
    var postId = getCurrentPostId();
    var updatedRecord = getEditedEntityRecord('postType', postType, postId);
    var nonTransientEdits = postEdits !== null && postEdits !== void 0 ? postEdits : getNonTransientEdits(postType, postId);

    var edits = _objectSpread2({
      id: postId
    }, nonTransientEdits);

    debug$2.info("-*Emulate {Saving Post} [".concat(postId, "]"), nonTransientEdits);
    receiveEntityRecords('postType', postType, updatedRecord, undefined, true, edits);
  }
  function storeTest() {
    debug$2.info('-?storeTest - Activated manually');
    emulateSavingPost();
  } // Internal debug helpers -----------------------------------------------------]

  var postSaved = true;
  subscribe(function () {
    if (isSavingPost()) {
      postSaved = false;
      debug$2.info('-?{Saving Post...}');
    } else {
      if (!postSaved) {
        debug$2.info('-*{Post Saved}');
        postSaved = true;
      }
    }
  });

  function debugPostStatus() {
    if (enableDebug$2) {
      var status = entityState.isPostDirty ? 'dirty' : 'clean';
      var args = ["-".concat(entityState.isPostDirty ? '!' : '*', "Post editing state is {").concat(status, "}")];
      !entityState.shouldResetEdits && args.push(keys(getNonTransientEdits()));
      debug$2.info.apply(debug$2, args);
    }
  } // let keepAttributes = []
  // function collectEdits(edits, canCollect = false) {
  // 	const editKeys = isArray(edits) ? edits : keys(edits);
  // 	if(!isArray(entityState.shouldResetEdits) && canCollect) entityState.shouldResetEdits = [];
  //
  // 	if(isArray(entityState.shouldResetEdits)) {
  // 		if(includes(entityState.shouldResetEdits, 'atts')) pull(entityState.shouldResetEdits, 'atts');
  // 		if(includes(edits, 'atts') && some(keepAttributes, key => includes(supportedKeys, key)))  pull(edits, 'atts');
  // 		entityState.shouldResetEdits.push(...editKeys, ...keepAttributes);
  // 		keepAttributes = [];
  // 		// } else {
  // 		// 	entityState.shouldResetEdits.push(...editKeys);
  // 		// }
  // 	} else {
  // 		keepAttributes = editKeys;
  // 	}
  // }
  // let isWaitingForClean = false;
  // subscribe(() => {
  // 	const enable = false;
  //     if(enable && isArray(entityState.shouldResetEdits) && isPostDirty) {
  // 		// isWaitingForClean = true;
  // 		const nonTransientEdits = getNonTransientEdits();
  // 		debugPostStatus('{entityState.shouldResetEdits}', { entityState.shouldResetEdits, nonTransientEdits });
  // 		if(!isEmpty(nonTransientEdits)) {
  // 			pull(entityState.shouldResetEdits, ...keys(nonTransientEdits));
  // 			if(isEmpty(entityState.shouldResetEdits)) {
  // 				emulateSavingPost();
  // 			}
  // 		}
  //     }
  // 	if(isArray(entityState.shouldResetEdits) && isEmpty(entityState.shouldResetEdits) && !isPostDirty) {
  // 		debugPostStatus('{entityState.shouldResetEdits isEmpty}');
  // 		entityState.shouldResetEdits = false;
  // 		// isWaitingForClean = false;
  // 	}
  // });
  // export function beforeLanguageSwitch(lang) {
  // 	debugLanguageSwitch('before', lang);
  // 	if(isPostDirty) return;
  // 	// entityState.shouldResetEdits = true;
  // }
  //
  // export function afterLanguageSwitch(lang) { // clientId, activateSync
  // 	if(!entityState.shouldResetEdits) return;
  // 	// entityState.isTracking = true;
  //
  // 	// const edits = [];
  // 	// if(clientId === rootClientId) {
  // 	// 	edits.push('atts');
  // 	// 	if(activateSync) edits.push('content');
  // 	// } else {
  // 	// 	edits.push('content');
  // 	// 	if(activateSync) edits.push('atts');
  // 	// }
  // 	// collectEdits(edits, true);
  // 	debugLanguageSwitch('after', lang);
  // }

  // WordPress dependencies
  var _lodash$3 = lodash,
      forEach = _lodash$3.forEach,
      castArray = _lodash$3.castArray,
      includes$1 = _lodash$3.includes,
      noop = _lodash$3.noop;
  var select = wp.data.select; // Internal dependencies
  var enableDebug$1 = getExternalData('debug.raw_helpers', false);
  var debug$1 = getDebug(enableDebug$1); // helpers for RAW attributes -------------------------------------------------]
  // set the initial values for RAW attributes
  // NB! set them only for the first time when values in 'store' are undefined
  // all subsequent calls should be ignored - it's necessary as the document editing panel
  // will be mounted and unmounted every time when switching to blocks editing
  // NB! for the first time (when values are undefined) also synchronize the displayed value with the current language
  // since the current language may differ from the server language if the 'session' support is active

  function setRawAttributes() {
    var addListeners = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

    var _select = select('core/editor'),
        getEditedPostAttribute = _select.getEditedPostAttribute;

    var syncContent = false;
    forEach(supportedAtts, function (selector, attr) {
      if (addListeners) {
        var value = getRaw(attr);

        if (value === undefined) {
          value = getEditedPostAttribute("".concat(attr, "_raw"));
          if (attr === 'title' && value === 'Auto Draft') value = '';
          setRaw(attr, value);
          addInputListener(selector, getListener(attr));
          syncContent = true; // 'title' does not require 'inserted hook' as it is not removed from the page
          // when the attribute Panel is closed
          // if(attr !== 'title') attachInsertedHooks(attr, selector);
        } else {
          addInputListener(selector, getListener(attr)); // if the language has been switched while editing blocks
          // then synchronize switching for newly created elements (for example, 'excerpt')
          // 'title' does not require synchronization as it is not removed from the page while editing blocks

          if (attr !== 'title') switchRawAttributes(null, attr);
          debug$1.info("set for {".concat(attr, "} is ignored, current value = ").concat(value));
        }
      } else {
        // with the third argument equal to false listener will be removed
        addInputListener(selector, getListener(attr), false);
      }
    });

    if (syncContent) {
      switchRawAttributes();
    }
  } // update RAW attributes before changing language
  // (if 'onlyAtts' is not null - update RAW for these attributes only)

  function updateRawAttributes() {
    var onlyAtts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    onlyAtts = onlyAtts === null ? null : castArray(onlyAtts);
    forEach(supportedAtts, function (selector, attr) {
      if (onlyAtts === null || includes$1(onlyAtts, attr)) {
        var value = getInputValue(selector);
        updateRaw(attr, value);
      }
    });
  } // select content for the language from the RAW value and set it in the INPUT element
  // (if 'onlyAtts' is not null - select content for these attributes only)

  function switchRawAttributes(lang) {
    var onlyAtts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var editorLang = lang !== null && lang !== void 0 ? lang : getLang(); // const names = onlyAtts === null ? null : castArray(onlyAtts);

    var attributes = getEntityAttributes(onlyAtts === null ? null : castArray(onlyAtts));
    var edits = {};
    forEach(attributes, function (value, attr) {
      var rawValue = getRaw(attr);

      if (rawValue !== undefined) {
        var shouldBeValue = getLangContent(rawValue, editorLang);
        if (value !== shouldBeValue) edits[attr] = shouldBeValue;
      }
    });
    updateEntityAttributes(edits);
  } // because the document editing panel will be mounted and unmounted every time when switching to blocks editing
  // we register the root hook only once and do not remove it on unmounting

  function registerRootUpdater(rootId) {
    addHook(rootId, switchRawAttributes);
  } // listeners on changes and on DOM 'insert' -----------------------------------]
  // we need to pre-create listeners for each attribute,
  // since we cannot use arrow function directly when adding listener - later we won't be able to remove such listener

  var listeners = {};
  forEach(supportedKeys, function (attr) {
    listeners[attr] = function () {
      return updateRawAttributes(attr);
    };
  });

  function getListener(attr) {
    var _listeners$attr;

    return (_listeners$attr = listeners[attr]) !== null && _listeners$attr !== void 0 ? _listeners$attr : noop;
  } // const sidebarRoot = '.edit-post-sidebar > .components-panel';
  //
  // function attachInsertedHooks(attr, selector) {
  // 	whenNodeInserted(sidebarRoot, selector, () => {
  // 		debug.info(`-Node Inserted for {"${attr}"}`);
  // 		// synchronize switching for newly created element
  // 		switchRawAttributes(null, attr);
  // 		// add the listener again (maybe the previous one was removed with the element or maybe not)
  // 		// NOTE from Docs: if multiple identical EventListeners are registered on the same EventTarget
  // 		// with the same parameters, the duplicate instances are discarded.
  // 		addInputListener(selector, getListener(attr));
  // 	});
  // }

  // WordPress dependencies
  var _wp$element$1 = wp.element,
      useCallback$1 = _wp$element$1.useCallback,
      useEffect$1 = _wp$element$1.useEffect;
  var Button = wp.components.Button; // Zukit dependencies

  var withPlugin = wp.zukit.plugins.withPlugin;
  var useForceUpdater$1 = wp.zukit.data.useForceUpdater; // Internal dependencies

  var LangControlSetting = function LangControlSetting(_ref) {
    var forceUpdateParent = _ref.forceUpdate;
    var forceUpdate = useForceUpdater$1(); // in the hook is checked if the language has changed, then we call 'switchRawAttributes'

    var editorLang = useOnLangChange(rootClientId, switchRawAttributes);
    useEffect$1(function () {
      // set the initial RAW attributes on mounting the component and add listeners
      setRawAttributes(); // register 'rootUpdater' for subsequent language synchronization

      registerRootUpdater(rootClientId);
      return function () {
        // with argument equal to false all listeners will be removed
        setRawAttributes(false);
      };
    }, []); // switch the language, call the update of the component and its parent -
    // since the update does not happen by itself because we do not store the language value in the component state
    // (changing the content of the element to the value corresponding to the new language will occur in 'useOnLangChange' hook)

    var setLanguage = useCallback$1(function (value) {
      changeLang(value);
      forceUpdate();
      forceUpdateParent();
      syncBlocks(rootClientId); // 'forceUpdate' and 'forceUpdateParent' never change
      // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(LangControl, {
      lang: editorLang,
      onClick: setLanguage
    }), /*#__PURE__*/React.createElement(Button, {
      isSecondary: true,
      onClick: storeTest
    }, "Test"));
  };

  var pluginProps = _objectSpread2(_objectSpread2({}, metadata), {}, {
    title: LangControl.Indicator,
    titleProps: function titleProps() {
      return {
        lang: getLang()
      };
    }
  });

  var render = withPlugin(pluginProps)(LangControlSetting); // NOTE: All experiments left here --------------------------------------------]
  // function collectAllRelatedBlocks(blocks) {
  // 	return reduce(blocks, (collected, {clientId, innerBlocks, attributes}) => {
  // 		if(has(attributes, 'qtxLang')) collected.push(clientId);
  // 		if(innerBlocks.length) {
  // 			const innerIds = collectAllRelatedBlocks(innerBlocks);
  // 			collected.push(...innerIds);
  // 		}
  // 		return collected;
  // 	}, []);
  // }
  //
  // function switchAllRelatedBlocks(lang, getBlocks, updateBlockAttributes, clientId = null) {
  // 	const allBlocks = getBlocks();
  // 	const blockIds = collectAllRelatedBlocks(allBlocks);
  // 	Zubug.data({ allBlocks, blockIds });
  //
  // 	blockIds.forEach(blockClientId => {
  // 		// do not update own attributes
  // 		if(blockClientId !== clientId) {
  // 			updateBlockAttributes(blockClientId, { qtxLang: lang } );
  // 		}
  // 	});
  // }
  // export default compose([
  // 	withPluginNoMeta(metadata),
  // 	withSelect(select => {
  // 		return { getBlocks: select('core/block-editor').getBlocks };
  // 	}),
  // 	withDispatch(dispatch => {
  // 		// const { updateBlockAttributes } = dispatch('core/block-editor');
  // 		return { updateBlockAttributes: dispatch('core/block-editor').updateBlockAttributes };
  // 	}),
  // ])(LangControlSetting);

  // Internal dependencies
  var name = metadata.name,
      title = metadata.title;
  var settings = {
    title: title,
    render: render
  };

  var plugin = /*#__PURE__*/Object.freeze({
    __proto__: null,
    metadata: metadata,
    name: name,
    settings: settings
  });

  // WordPress dependencies
  var _lodash$2 = lodash,
      includes = _lodash$2.includes; // const { __ } = wp.i18n;

  var createHigherOrderComponent = wp.compose.createHigherOrderComponent;
  var InspectorControls = wp.blockEditor.InspectorControls;
  var _wp$element = wp.element,
      useEffect = _wp$element.useEffect,
      useCallback = _wp$element.useCallback,
      useRef = _wp$element.useRef,
      useMemo = _wp$element.useMemo; // const { select } = wp.data;
  // Zukit dependencies

  var useForceUpdater = wp.zukit.data.useForceUpdater; // Internal dependencies
  var activateSync = getExternalData('sync', false);
  var enableDebug = getExternalData('debug.edit_lang', false);
  var debug = getDebug(enableDebug);

  var BlockEditLang = function BlockEditLang(props) {
    var name = props.name,
        clientId = props.clientId,
        setAttributes = props.setAttributes,
        attributes = props.attributes;
    var qtxRaw = attributes.qtxRaw,
        qtxLang = attributes.qtxLang; // store 'qtxLang' and 'qtxRaw' on the reference since their update occurs in 'useEffect'

    var rawRef = useRef(null);

    if (rawRef.current === null) {
      rawRef.current = {
        lang: qtxLang,
        raw: qtxRaw,
        id: clientId
      };
    } // create a list of attributes and an array of their values ('translatedAtts' is string - see 'utils.js')


    var _getTranslated = getTranslated(name, attributes),
        _getTranslated2 = _slicedToArray(_getTranslated, 2),
        translatedAtts = _getTranslated2[0],
        translatedValues = _getTranslated2[1]; // callback for replacing the values of all 'translated' attributes for the required language


    var replaceContent = useCallback(function (lang) {
      var prevLang = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var _rawRef$current = rawRef.current,
          raw = _rawRef$current.raw,
          id = _rawRef$current.id;
      if (!activateSync && !prevLang) prevLang = lang;

      if (lang !== prevLang) {
        var atts = switchContent(raw, lang, translatedAtts);
        rawRef.current.lang = lang;
        setAttributes(_objectSpread2({
          qtxLang: lang
        }, atts));
      }

      syncCompleted(id);
    }, [translatedAtts, setAttributes]);
    var forceUpdate = useForceUpdater(); // in the hook is checked if the language has changed, then we call 'replaceContent'

    var editorLang = useOnLangChange(clientId, replaceContent); // register 'forceUpdate' for subsequent language synchronization

    useLangHook(clientId, forceUpdate);
    var onChangeLang = useCallback(function (lang) {
      var _rawRef$current2 = rawRef.current,
          id = _rawRef$current2.id,
          prevLang = _rawRef$current2.lang;

      if (activateSync) {
        changeLang(lang);
        forceUpdate();
        syncBlocks(id);
      } else {
        replaceContent(lang, prevLang);
      }

      debug.info("{".concat(id, "} Language switched to [").concat(prevLang, " -> ").concat(lang, "]"));
    }, [forceUpdate, replaceContent]); // synchronize, create RAW if does not exist and maybe fix it - on mounting only

    useEffect(function () {
      // if we already have RAW - synchronize the first time 'qtxLang' attribute and 'editorLang'
      // only if 'activateSync' is true, otherwise do not synchronize
      if (qtxLang !== editorLang && hasRaw(rawRef)) replaceContent(editorLang); // if RAW does not exist - create it

      if (!hasRaw(rawRef)) {
        var _createRawContent = createRawContent(editorLang, translatedValues, translatedAtts),
            _createRawContent2 = _slicedToArray(_createRawContent, 2),
            raw = _createRawContent2[0],
            update = _createRawContent2[1];

        rawRef.current.raw = raw;
        rawRef.current.lang = editorLang;
        setAttributes(_objectSpread2({
          qtxLang: editorLang,
          qtxRaw: raw
        }, update));
        debug.data({
          lang: qtxLang,
          raw: raw,
          update: update,
          translatedValues: translatedValues,
          translatedAtts: translatedAtts
        }, "Raw created {".concat(rawRef.current.id, "}"));
      } else {
        // fix if RAW was created for wrong amount of attributes
        var _rawRef$current3 = rawRef.current,
            _raw = _rawRef$current3.raw,
            id = _rawRef$current3.id;
        var fixedRaw = maybeFixRawContent(_raw, editorLang, translatedValues);
        debug.data({
          raw: _raw,
          fixedRaw: fixedRaw !== false ? fixedRaw : null,
          translatedValues: translatedValues,
          translatedAtts: translatedAtts
        }, "Raw ".concat(fixedRaw !== false ? 'fixed' : 'existed', ": {").concat(id, "}"));
        if (fixedRaw !== false) rawRef.current.raw = fixedRaw;
      } // eslint-disable-next-line react-hooks/exhaustive-deps

    }, []); // after each change in one of the attributes that require the translation, we update 'qtxRaw'

    useEffect(function () {
      if (hasRaw(rawRef)) {
        var _rawRef$current4 = rawRef.current,
            raw = _rawRef$current4.raw,
            lang = _rawRef$current4.lang;
        var updatedRaw = updateRawContent(raw, lang, translatedValues);

        if (updatedRaw !== rawRef.current.raw) {
          rawRef.current.raw = updatedRaw;
          setAttributes({
            qtxRaw: updatedRaw
          });
          debug.data({
            updatedRaw: updatedRaw,
            translatedValues: translatedValues
          }, "Raw updated: {".concat(rawRef.current.id, "}"));
        }
      } // we used a spread element in the dependency array -> we can't statically verify the correct dependencies
      // eslint-disable-next-line react-hooks/exhaustive-deps

    }, [].concat(_toConsumableArray(translatedValues), [setAttributes]));
    var controlLang = activateSync ? editorLang : qtxLang !== null && qtxLang !== void 0 ? qtxLang : editorLang;
    return useMemo(function () {
      return /*#__PURE__*/React.createElement(InspectorControls, null, /*#__PURE__*/React.createElement(LangControl.Panel, {
        lang: controlLang,
        onClick: onChangeLang
      }));
    }, [controlLang, onChangeLang]);
  }; // HOC in which we add a language editing panel if the block fits our requirements


  var withRawEditControl = createHigherOrderComponent(function (BlockEdit) {
    return function (props) {
      var name = props.name,
          clientId = props.clientId;
      var editorIds = getEditorBlocks(); // 'getEditorBlocks' returns all block client IDs in the editor, check if our block is in this list
      // NOTE: sometimes the blocks of those types that we support are created, but these blocks are not edited in the editor -
      // for example, blocks for visual preview of the editable block

      var isEditableBlock = includes(editorIds, clientId);
      if (!isEditableBlock) debug.info("Block [".concat(name, "] with id {").concat(clientId, "} was skipped"), {
        editableBlocks: editorIds
      });else debug.info("Block [".concat(name, "] isEditable and {").concat(isSupported(name) ? 'isSupported' : 'is NOT Supported', "}"));
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(BlockEdit, props), isSupported(name) && isEditableBlock && /*#__PURE__*/React.createElement(BlockEditLang, props));
    };
  }, 'withRawEditControl');

  // WordPress dependencies
  var _lodash$1 = lodash,
      isNil = _lodash$1.isNil,
      assign = _lodash$1.assign,
      has = _lodash$1.has; // const { __ } = wp.i18n;

  var addFilter = wp.hooks.addFilter; // const { useEffect, useCallback } = wp.element; // cloneElement, useState, useEffect, useLayoutEffect

  function addRawAttribute(settings, name) {
    if (!isNil(settings.attributes)) {
      if (isSupported(name)) {
        // maybe we have already added attributes to this block?
        // sometimes blocks are registered several times (who knows why?)
        if (!has(settings, 'attributes.qtxRaw')) {
          settings.attributes = assign({}, settings.attributes, {
            qtxRaw: {
              type: 'string'
            },
            qtxLang: {
              type: 'string'
            }
          });
        }
      }
    }

    return settings;
  }

  addFilter('blocks.registerBlockType', 'zu/translate', addRawAttribute);
  addFilter('editor.BlockEdit', 'zu/translate', withRawEditControl); // NOTE: All experiments left here --------------------------------------------]
  // const { isSavingPost } = select('core/editor');
  // let postSaved = true;
  //
  // subscribe(() => {
  //     if(isSavingPost()) {
  // 		postSaved = false;
  // 		Zubug.info('{isSavingPost}');
  //     } else {
  // 		if(!postSaved) {
  //             Zubug.info('~Post Saved~');
  //             postSaved = true;
  //         }
  //     }
  // });
  // // Collect information on registered blocks
  // const filterBlocks = (settings, name) => {
  //     console.log(settings.name, name);
  // 	if(settings.name === 'core/button') console.log('settings', settings);
  //     // we need to pass along the settings object
  //     // even if we haven't modified them!
  //     return settings;
  // }
  //
  // addFilter(
  //     'blocks.registerBlockType',
  //     'zu/test',
  //     filterBlocks
  // );
  // function applyExtraProps(extraProps, blockType, attributes) {
  // 	const {
  // 		content,
  // 		rawContent,
  // 		lang,
  // 	} = attributes;
  // 	if(isSupported(blockType?.name)) {
  // 		Zubug.data({ extraProps, blockType, attributes });
  // 	}
  //
  // 	const blocks = qtranxj_split(rawContent);
  // 	blocks[lang] = content;
  // 	const newLang = lang === 'en' ? 'ru' : 'en';
  // 	Zubug.data({ lang, content,  blocks });
  // 	extraProps.className join([...map(blocks, (text, l) => `[:${l}]${text}`), '[:]'], '')
  //
  // 	if(typeof hideOnMobile !== 'undefined' && hideOnMobile) {
  // 		extraProps.className = extraProps.className + ' hide-on-mobile';
  // 	}
  // 	return extraProps;
  // }
  // addFilter('blocks.getSaveContent.extraProps', 'zu/paragraph', applyExtraProps);
  // function getBlockAttributes(attributes, blockType, param3, param4) {
  // 	if(isSupported(blockType?.name)) {
  // 		const { content, rawContent, lang } = attributes;
  // 		const translated = rawContent ? getLangContent(rawContent, lang) : content;
  // 		attributes.content = translated;
  // 		Zubug.data({ attributes, blockType, param3, param4 });
  // 		return attributes;
  // 	}
  // 	return attributes;
  // }
  // addFilter('blocks.getBlockAttributes', 'zu/paragraph', getBlockAttributes);
  // function getSaveElement(elem, blockType, attributes) {
  // 	const blockName = blockType?.name;
  // 	if(isSupported(blockName)) {
  // 		// Zubug.info('called');
  // 		if(attributes.isXT) {
  // 			// const fallback = () => elem;
  // 			const { rawContent } = attributes;
  // 			const isEdit = !!rawContent;
  // 			// // const save = get(blockSave, blockName) ?? fallback;
  // 			Zubug.info(isSavingPost() ? '{isSavingPost}' : 'update?');
  // 			if(isEdit) {
  // 				attributes.content = rawContent;
  // 				// attributes.rawContent = undefined;
  // 				const newEl = cloneElement(elem, { attributes });
  // 				Zubug.data({ content: attributes.content, rawContent: attributes.rawContent }, 'new Element');
  // 				return newEl;
  // 			}
  // 		}
  // 	}
  // 	return elem;
  // }
  // addFilter('blocks.getSaveElement', 'zu/paragraph', getSaveElement);

  // WordPress dependencies
  var _lodash = lodash,
      defaults = _lodash.defaults;
  var registerPlugin = wp.plugins.registerPlugin; // const { registerBlockType } = wp.blocks;
  // Import debug object and make it available from global scope

  window.Zubug = _objectSpread2({}, wp.zukit.debug || {}); // Internal dependencies

  function registerPlugins() {
    [plugin // status,
    ].forEach(function (sidebar) {
      if (!sidebar) return;
      var name = sidebar.name,
          settings = sidebar.settings; // we need to pass {icon: false} if the attribute is missed to avoid rendering the default icon

      registerPlugin(name, defaults(settings, {
        icon: false
      }));
    });
  } // Register ZU blocks collection or category
  // const supportsCollections = registerCollection();
  // if(!supportsCollections) registerCategory();
  //  Register Blocks -----------------------------------------------------------]
  // import * as form from './blocks/form/index.js';
  // import * as recaptcha from './blocks/field-recaptcha/index.js';
  //
  // export function registerBlocks() {
  // 	[
  // 		form,
  // 		recaptcha,
  //
  // 	].forEach(block => {
  //
  // 		if(!block) return;
  //
  // 		const { name, settings } = block;
  // 		if(!supportsCollections) settings.category = brandAssets.slug;
  // 		registerBlockType(name, settings);
  //
  // 	} );
  // }
  //

  registerPlugins(); // registerBlocks();

  exports.registerPlugins = registerPlugins;

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;

})({});
//# sourceMappingURL=zutranslate-blocks.min.js.map
