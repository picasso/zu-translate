var zutranslate_blocks = (function (exports) {
  'use strict';

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  // WordPress dependencies
  var __ = wp.i18n.__; // className,
  // name,
  // title,
  // icon,
  // slot     kind of SlotFills which will be used:
  //              'setting'       - PluginDocumentSettingPanel
  //              'sidebar'       - PluginSidebar
  //              'status'        - PluginPostStatusInfo
  //	            '<slot-name>'   - Panel inside sidebar Slot with this name,
  //                                NB! attribute 'slot' should be equal to the name when Slot was added
  // moreItem,
  // moreTitle,
  // moreIcon,
  // allowEmptyValues,        when false and metaValues are empty (undefined or null) - nothing will be rendered
  // initialOpen
  // metaKeys     string|array
  //                          if metaKeys is null or missing - meta data will not be requested and functions for updating them will not be created

  var metadata = {
    slot: 'setting',
    name: 'zu-language',
    title: __('Language'),
    metaKeys: null
  };

  // WordPress dependencies
  var _lodash = lodash,
      forEach = _lodash.forEach,
      isString = _lodash.isString,
      isNil = _lodash.isNil,
      isEmpty = _lodash.isEmpty,
      noop = _lodash.noop,
      filter = _lodash.filter,
      merge = _lodash.merge,
      transform = _lodash.transform;
  var _wp$compose = wp.compose,
      createHigherOrderComponent = _wp$compose.createHigherOrderComponent,
      compose = _wp$compose.compose;
  var _wp$editPost = wp.editPost,
      PluginSidebarMoreMenuItem = _wp$editPost.PluginSidebarMoreMenuItem,
      PluginDocumentSettingPanel = _wp$editPost.PluginDocumentSettingPanel,
      PluginPostStatusInfo = _wp$editPost.PluginPostStatusInfo,
      PluginSidebar = _wp$editPost.PluginSidebar;
  var _wp$components = wp.components,
      Fill = _wp$components.Fill,
      PanelBody = _wp$components.PanelBody;
  var _wp$data = wp.data,
      withSelect = _wp$data.withSelect,
      withDispatch = _wp$data.withDispatch; // Higher-order component which renders the original component inside requested SlotFills

  var withSidebarPlugin = createHigherOrderComponent(function (WrappedComponent) {
    return function (ownProps) {
      var className = ownProps.className,
          name = ownProps.name,
          title = ownProps.title,
          icon = ownProps.icon,
          _ownProps$slot = ownProps.slot,
          slot = _ownProps$slot === void 0 ? 'setting' : _ownProps$slot,
          _ownProps$moreItem = ownProps.moreItem,
          moreItem = _ownProps$moreItem === void 0 ? false : _ownProps$moreItem,
          moreTitle = ownProps.moreTitle,
          moreIcon = ownProps.moreIcon,
          metaValues = ownProps.metaValues,
          _ownProps$allowEmptyV = ownProps.allowEmptyValues,
          allowEmptyValues = _ownProps$allowEmptyV === void 0 ? true : _ownProps$allowEmptyV,
          _ownProps$initialOpen = ownProps.initialOpen,
          initialOpen = _ownProps$initialOpen === void 0 ? true : _ownProps$initialOpen; // when allowEmptyValues is false and metaValues are empty (undefined or null) - nothing will be rendered

      if (!allowEmptyValues && (isNil(metaValues) || isEmpty(filter(metaValues)))) return null;
      if (slot == 'status') return /*#__PURE__*/React.createElement(PluginPostStatusInfo, null, /*#__PURE__*/React.createElement(WrappedComponent, ownProps));
      if (slot == 'setting') return /*#__PURE__*/React.createElement(PluginDocumentSettingPanel, {
        name: name,
        title: title,
        className: className
      }, /*#__PURE__*/React.createElement(WrappedComponent, ownProps));
      if (slot == 'sidebar') return /*#__PURE__*/React.createElement(React.Fragment, null, moreItem && /*#__PURE__*/React.createElement(PluginSidebarMoreMenuItem, {
        target: name,
        icon: moreIcon
      }, moreTitle || title), /*#__PURE__*/React.createElement(PluginSidebar, {
        name: name,
        title: title,
        icon: icon,
        className: className
      }, /*#__PURE__*/React.createElement(WrappedComponent, ownProps))); // otherwise fill in the requested slot

      return /*#__PURE__*/React.createElement(Fill, {
        name: slot,
        className: className
      }, /*#__PURE__*/React.createElement(PanelBody, {
        initialOpen: initialOpen,
        title: title
      }, /*#__PURE__*/React.createElement(WrappedComponent, ownProps)));
    };
  }, 'withSidebarPlugin');

  var withSidebar = function withSidebar(sidebarProps) {
    return compose([// get Sidebar props
    createHigherOrderComponent(function (WrappedComponent) {
      return function (ownProps) {
        return /*#__PURE__*/React.createElement(WrappedComponent, _extends({}, ownProps, sidebarProps));
      };
    }, 'withSidebarProps'), // get meta values by keys
    withSelect(function (select, _ref) {
      var metaKeys = _ref.metaKeys;
      // if metaKeys is null or missing(empty) - do nothing
      if (isEmpty(metaKeys)) return {
        metaValues: null,
        meta: null
      }; // metaValues	- object { key: value }
      // meta:		- value of first key in metaKeys array, more often than not - this is the only value

      var _select = select('core/editor'),
          getEditedPostAttribute = _select.getEditedPostAttribute;

      var metaValues = isString(metaKeys) ? _defineProperty({}, metaKeys, getEditedPostAttribute('meta')[metaKeys]) : transform(metaKeys, function (values, key) {
        values[key] = getEditedPostAttribute('meta')[key];
      }, {});
      return {
        meta: metaValues[isString(metaKeys) ? metaKeys : metaKeys[0]],
        metaValues: metaValues
      };
    }), // create function to update meta
    withDispatch(function (dispatch, _ref3) {
      var metaKeys = _ref3.metaKeys,
          meta = _ref3.meta;

      // provide inteface to create notices
      var _dispatch = dispatch('core/notices'),
          createNotice = _dispatch.createNotice; // if metaKeys is null or missing(empty) -  then do nothing else


      if (isEmpty(metaKeys)) return {
        createNotice: createNotice,
        setMetaValues: noop,
        setMetaValue: noop,
        setMetaAttributes: noop
      }; // setMetaValue(object)				- updates meta in the current post for the first key in metaKeys array,
      // 										more often than not - this is the only key
      // setMetaAttributes(object)		- updates attributes for the first key in metaKeys array
      //
      // setMetaValues(object)			- updates meta in the current post from single object { metKey: value }

      var _dispatch2 = dispatch('core/editor'),
          editPost = _dispatch2.editPost; // const updateValue = ;


      var firstKey = isString(metaKeys) ? metaKeys : metaKeys[0];
      return {
        createNotice: createNotice,
        setMetaValue: function setMetaValue(value) {
          return editPost({
            meta: _defineProperty({}, firstKey, value)
          });
        },
        setMetaAttributes: function setMetaAttributes(attributes) {
          return editPost({
            meta: _defineProperty({}, firstKey, merge({}, meta, attributes))
          });
        },
        setMetaValues: function setMetaValues(values) {
          return forEach(values, function (value, key) {
            return editPost({
              meta: _defineProperty({}, key, value)
            });
          });
        }
      };
    }), withSidebarPlugin]);
  };

  var _window$qTranslateCon;

  // WordPress dependencies
  var _lodash$1 = lodash,
      map = _lodash$1.map; // split, padEnd, trimEnd

  var __$1 = wp.i18n.__;
  var PanelBody$1 = wp.components.PanelBody; // , TextControl, Dropdown, Button
  // Import debug object and make it available from global scope

  window.Zubug = _objectSpread2({}, wp.zukit.debug || {}); // Zukit dependencies

  var SelectItemControl = wp.zukit.components.SelectItemControl; // Internal dependencies

  var _ref = (_window$qTranslateCon = window.qTranslateConfig) !== null && _window$qTranslateCon !== void 0 ? _window$qTranslateCon : {},
      config = _ref.language_config;

  var langOptions = map(config, function (data, key) {
    return {
      value: key,
      label: data.name
    };
  });
  var langPrefix = 'components-zu-lang-control';

  function transformLangValue(value, label, style) {
    return /*#__PURE__*/React.createElement("span", {
      className: "__lang",
      style: style
    }, label);
  } // Zubug.data({ langOptions });


  var LangControl = function LangControl(_ref2) {
    var title = _ref2.title,
        _ref2$lang = _ref2.lang,
        lang = _ref2$lang === void 0 ? 'en' : _ref2$lang,
        onClick = _ref2.onClick,
        withPanel = _ref2.withPanel;
    var langControl = /*#__PURE__*/React.createElement(SelectItemControl, {
      className: langPrefix // withLabels
      ,
      options: langOptions,
      selectedItem: lang,
      onClick: onClick,
      transformValue: transformLangValue
    });
    return !withPanel ? langControl : /*#__PURE__*/React.createElement(PanelBody$1, {
      title: title || __$1('Language')
    }, langControl);
  };

  LangControl.Panel = function (props) {
    return /*#__PURE__*/React.createElement(LangControl, _extends({
      withPanel: true
    }, props));
  };
  // "typescript": "^4.5.2"
  // "@wordpress/eslint-plugin": "^7.4.0",

  /**
   * Utilities for qTranslate blocks
   */
  // 	lang_code_format: '[a-z]{2,3}',
  // 	language_config: {
  // 		en: {
  // 			admin_name: "Американский Английский",
  // 			flag: "gb.png",
  // 			locale: "en_US",
  // 			locale_html: "en",
  // 			name: "English",
  // 		},
  // 		ru: {
  // 			admin_name: "Русский",
  // 			flag: "ru.png",
  // 			locale: "ru_RU",
  // 			locale_html: "ru",
  // 			name: "Русский",
  // 		},
  // 	},
  // };

  /* global qTranslateConfig */

  var qtranxj_get_split_blocks = function qtranxj_get_split_blocks(text) {
    var regex = '(<!--:lang-->|<!--:-->|\\[:lang]|\\[:]|{:lang}|{:})'.replace(/lang/g, qTranslateConfig.lang_code_format);
    var splitRegex = new RegExp(regex, "gi"); // Most browsers support RegExp.prototype[@@split]()... except IE

    if ('a~b'.split(/(~)/).length === 3) {
      return text.split(splitRegex);
    } // compatibility for unsupported engines


    var start = 0,
        arr = [];
    var result;

    while ((result = splitRegex.exec(text)) != null) {
      arr.push(text.slice(start, result.index));
      if (result.length > 1) arr.push(result[1]);
      start = splitRegex.lastIndex;
    }

    if (start < text.length) arr.push(text.slice(start));
    if (start === text.length) arr.push(''); // delimiter at the end

    return arr;
  };
  var qtranxj_split = function qtranxj_split(text) {
    var blocks = qtranxj_get_split_blocks(text);
    return qtranxj_split_blocks(blocks);
  };
  var qtranxj_split_blocks = function qtranxj_split_blocks(blocks) {
    var result = new Object();

    for (var _lang in qTranslateConfig.language_config) {
      result[_lang] = '';
    }

    if (!blocks || !blocks.length) return result;

    if (blocks.length === 1) {
      // no language separator found, enter it to all languages
      var b = blocks[0];

      for (var _lang2 in qTranslateConfig.language_config) {
        result[_lang2] += b;
      }

      return result;
    }

    var clang_regex = new RegExp('<!--:(lang)-->'.replace(/lang/g, qTranslateConfig.lang_code_format), 'gi');
    var blang_regex = new RegExp('\\[:(lang)]'.replace(/lang/g, qTranslateConfig.lang_code_format), 'gi');
    var slang_regex = new RegExp('{:(lang)}'.replace(/lang/g, qTranslateConfig.lang_code_format), 'gi');
    var lang = false;
    var matches;

    for (var i = 0; i < blocks.length; ++i) {
      var _b = blocks[i];
      if (!_b.length) continue;
      matches = clang_regex.exec(_b);
      clang_regex.lastIndex = 0;

      if (matches != null) {
        lang = matches[1];
        continue;
      }

      matches = blang_regex.exec(_b);
      blang_regex.lastIndex = 0;

      if (matches != null) {
        lang = matches[1];
        continue;
      }

      matches = slang_regex.exec(_b);
      slang_regex.lastIndex = 0;

      if (matches != null) {
        lang = matches[1];
        continue;
      }

      if (_b === '<!--:-->' || _b === '[:]' || _b === '{:}') {
        lang = false;
        continue;
      }

      if (lang) {
        if (!result[lang]) result[lang] = _b;else result[lang] += _b;
        lang = false;
      } else {
        // keep neutral text
        for (var key in result) {
          result[key] += _b;
        }
      }
    }

    return result;
  };

  // WordPress dependencies
  var _ = lodash; // Zukit dependencies

  var _wp$zukit$utils = wp.zukit.utils,
      externalData = _wp$zukit$utils.externalData,
      getExternalData = _wp$zukit$utils.getExternalData,
      toJSON = _wp$zukit$utils.toJSON,
      simpleMarkdown = _wp$zukit$utils.simpleMarkdown,
      getColorOptions = _wp$zukit$utils.getColorOptions; // Import debug object and make it available from global scope
  window.Zubug = _objectSpread2({}, wp.zukit.debug || {}); // Internal dependencies
  externalData('zutranslate_blocks_data'); // перед вызовами 'getExternalData' нужно один раз вызвать 'externalData'

  var supportedData = getExternalData('supported', {});
  var delimiters = ['[]', '{}', '<!-- -->']; // const blockName = 'core/paragraph';

  var supportedBlocks = _.keys(supportedData); // const blockDel = splitInHalf(delimiters[0]);


  function getTranslatedAtts(name) {
    return _.castArray(_.get(supportedData, [name, 'atts']));
  }
  function getTranslatedValues(name, attributes) {
    var translatedKeys = getTranslatedAtts(name);

    var translatedAtts = _.pick(attributes, translatedKeys);

    return [_.join(translatedKeys, ','), _.values(translatedAtts)];
  }
  function hasRaw(ref) {
    var _ref$current;

    return !!(ref === null || ref === void 0 ? void 0 : (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.raw);
  }
  function isSupported(name) {
    return _.includes(supportedBlocks, name);
  }
  function hasTranslations(text) {
    var blocks = qtranxj_get_split_blocks(text !== null && text !== void 0 ? text : ''); // no language separator found - there are no translations

    return (blocks === null || blocks === void 0 ? void 0 : blocks.length) > 1; // if (!blocks || !blocks.length)
    // 	return result;
    // if (blocks.length === 1) {
  }
  function getLangContent(raw, lang) {
    var _blocks$lang;

    var blocks = _.isArray(raw) ? qtranxj_split_blocks(raw) : getTranslatedBlocks(raw);
    return (_blocks$lang = blocks[lang]) !== null && _blocks$lang !== void 0 ? _blocks$lang : '';
  }
  function createRawContent(lang, values, translatedAtts) {
    if (values) {
      var separator = marker(testDelimters(), null, null, true);

      var rawItems = _.fill(_.range(0, values.length), '');

      var prevRaw = _.reduce(values, function (foundRaw, value) {
        return foundRaw === false ? hasTranslations(value) ? value : false : foundRaw;
      }, false);

      if (prevRaw) {
        var index = _.indexOf(values, prevRaw);

        var atts = _.split(translatedAtts !== null && translatedAtts !== void 0 ? translatedAtts : '', ',');

        _.set(rawItems, index, prevRaw);

        return [_.join(rawItems, separator), _defineProperty({}, atts[index], getLangContent(prevRaw, lang))];
      }

      var raw = _.join(rawItems, separator);

      return [updateRawContent(raw, lang, values), {}];
    }

    return [null, {}];
  }
  function updateRawContent(raw, lang) {
    var values = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    if (values) {
      var del = testDelimters(raw);
      var separator = marker(del, null, null, true);

      var content = _.split(raw, separator);

      var rawItems = _.reduce(content, function (newRaw, rawItem, index) {
        var blocks = getTranslatedBlocks(rawItem);

        if (values[index] !== undefined) {
          blocks[lang] = values[index];

          var withMarkers = _.map(blocks, function (text, ln) {
            return marker(del, ln, text);
          });

          newRaw[index] = _.join([].concat(_toConsumableArray(withMarkers), [marker(del)]), '');
        }

        return newRaw;
      }, []);
      return _.join(rawItems, separator);
    }

    return raw;
  }
  function switchContent(raw, lang, translatedAtts) {
    var atts = _.split(translatedAtts, ',');

    var rawItems = splitRawContent(raw);
    return _.reduce(atts, function (attributes, attr, index) {
      var value = getLangContent(rawItems[index], lang);

      _.set(attributes, attr, value);
      return attributes;
    }, {});
  }
  function getPostTitle() {
    return getInputValue('.editor-post-title__input');
  }
  function changePostTitle(title) {
    changeInputValue('.editor-post-title__input', title, true);
  } // internal helpers -----------------------------------------------------------]

  function splitRawContent(raw) {
    var del = testDelimters(raw);
    var separator = marker(del, null, null, true);
    return _.split(raw, separator);
  }

  function getTranslatedBlocks(raw) {
    return qtranxj_split(raw !== null && raw !== void 0 ? raw : '');
  }

  function splitInHalf(s) {
    var str = String(s);
    var middle = Math.floor(str.length / 2);
    return [str.substr(0, middle).trim(), str.substr(middle).trim()];
  }

  function testDelimters(s) {
    var blockDel = splitInHalf(delimiters[0]);

    if (_.isString(s)) {
      _.forEach(delimiters, function (d) {
        var del = splitInHalf(d);
        var regex = new RegExp(marker(del), 'gi');

        if (regex.exec(s) !== null) {
          blockDel = del;
          return false;
        }
      });
    }

    return blockDel;
  }

  function marker(del) {
    var lang = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var text = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var split = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    return "".concat(del[0]).concat(split ? ',' : ':').concat(lang !== null && lang !== void 0 ? lang : '').concat(del[1]).concat(text !== null && text !== void 0 ? text : '');
  }

  function getInputValue(selector) {
    var _document$querySelect, _document$querySelect2;

    return (_document$querySelect = (_document$querySelect2 = document.querySelector(selector)) === null || _document$querySelect2 === void 0 ? void 0 : _document$querySelect2.value) !== null && _document$querySelect !== void 0 ? _document$querySelect : null;
  }

  function changeInputValue(selector, value) {
    var textarea = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var el = document.querySelector(selector);

    if (el) {
      var prototype = textarea ? window.HTMLTextAreaElement.prototype : window.HTMLInputElement.prototype;
      var nativeInputValueSetter = Object.getOwnPropertyDescriptor(prototype, 'value').set;
      nativeInputValueSetter.call(el, value);
      var ev = new Event('input', {
        bubbles: true
      });
      el.dispatchEvent(ev);
    }
  }

  // WordPress dependencies
  // const $ = jQuery;
  // const { split, map, padEnd, trimEnd } = lodash;
  // const { __ } = wp.i18n;
  // const { compose } = wp.compose;
  // const { PanelRow, TextControl, Dropdown, Button } = wp.components;
  var useSelect = wp.data.useSelect;
  var _wp$element = wp.element,
      useState = _wp$element.useState,
      useCallback = _wp$element.useCallback; // Zukit dependencies
  // const classPrefix = 'components-zu-copy-plugin';
  // function getEditorTitle() {
  // 	return document.querySelector('.editor-post-title__input')?.value ?? null;
  // }
  //
  // function setEditorTitle(title) {
  // 	const titleInputRef = document.querySelector('.editor-post-title__input');
  // 	const valueSetter = Object.getOwnPropertyDescriptor(titleInputRef, 'value').set;
  // 	const prototype = Object.getPrototypeOf(titleInputRef);
  // 	const prototypeValueSetter = Object.getOwnPropertyDescriptor(prototype, 'value').set;
  // 	if(valueSetter && valueSetter !== prototypeValueSetter) {
  // 		prototypeValueSetter.call(titleInputRef, title);
  // 	} else {
  // 		valueSetter.call(titleInputRef, title);
  // 	}
  // 	titleInputRef.dispatchEvent(new Event('input', { bubbles: true })); // textarea 'input'
  // }
  // Copyright Edit Component

  var LangControlSetting = function LangControlSetting(_ref) {
    var lang2 = _ref.lang2;

    var _useSelect = useSelect(function (select) {
      var _select = select('core/editor'),
          getEditedPostAttribute = _select.getEditedPostAttribute; // , getCurrentPost


      var title = getEditedPostAttribute('title_raw');
      var lang = getEditedPostAttribute('qtx_editor_lang'); // const post = getCurrentPost();

      return [title, lang];
    }, []),
        _useSelect2 = _slicedToArray(_useSelect, 2),
        title = _useSelect2[0],
        lang = _useSelect2[1];

    var _useState = useState(lang),
        _useState2 = _slicedToArray(_useState, 2),
        editLang = _useState2[0],
        setEditLang = _useState2[1];

    var _useState3 = useState(title),
        _useState4 = _slicedToArray(_useState3, 2),
        rawTitle = _useState4[0],
        setRawTitle = _useState4[1];

    Zubug.data({
      rawTitle: rawTitle,
      editLang: editLang,
      lang2: lang2
    }); // const [author = '?', year = 2001] = split(meta, ':')
    // переключаем язык, сохраняем последнее редактированное значение в raw
    // и меняем контент элемента на значение соответсвующее новому языку

    var setLanguage = useCallback(function (value) {
      setEditLang(value);
      var editedTitle = getPostTitle();
      var newRaw = updateRawContent(rawTitle, editLang, [editedTitle]);
      if (newRaw !== rawTitle) setRawTitle(newRaw);
      var newTitle = getLangContent(newRaw, value);
      if (editedTitle !== newTitle) changePostTitle(newTitle);
      Zubug.data({
        newRaw: newRaw,
        newTitle: newTitle
      }); // return lang;
      // setMetaValue(`${value}:${year}`)
    }, [rawTitle, editLang]);
    return /*#__PURE__*/React.createElement(LangControl, {
      lang: editLang,
      onClick: setLanguage
    });
  };

  var render = withSidebar(metadata)(LangControlSetting); // export default compose([
  // 	withSidebar(metadata),
  // ])(CopyrightEdit);

  // Internal dependencies
  var name = metadata.name,
      title = metadata.title;
  var settings = {
    title: title,
    render: render
  };

  var plugin = /*#__PURE__*/Object.freeze({
    __proto__: null,
    metadata: metadata,
    name: name,
    settings: settings
  });

  // WordPress dependencies
  // const { pick, isNil, assign } = lodash;
  // const { __ } = wp.i18n;
  // const { addFilter } = wp.hooks;
  var createHigherOrderComponent$1 = wp.compose.createHigherOrderComponent; // const { PanelBody } = wp.components;

  var InspectorControls = wp.blockEditor.InspectorControls;
  var _wp$element$1 = wp.element,
      useEffect = _wp$element$1.useEffect,
      useCallback$1 = _wp$element$1.useCallback,
      useRef = _wp$element$1.useRef; // cloneElement, useState, useEffect, useLayoutEffect
  var withRawEditControls = createHigherOrderComponent$1(function (BlockEdit) {
    return function (props) {
      var name = props.name,
          isSelected = props.isSelected,
          setAttributes = props.setAttributes,
          attributes = props.attributes;
      var qtxRaw = attributes.qtxRaw,
          _attributes$qtxLang = attributes.qtxLang,
          qtxLang = _attributes$qtxLang === void 0 ? 'en' : _attributes$qtxLang; // Zubug.useMU();

      var rawRef = useRef(null);

      if (rawRef.current === null) {
        rawRef.current = {
          lang: qtxLang,
          raw: qtxRaw
        }; // Zubug.data({ lang: qtxLang, raw: qtxRaw }, 'Raw loaded');
      }

      var _getTranslatedValues = getTranslatedValues(name, attributes),
          _getTranslatedValues2 = _slicedToArray(_getTranslatedValues, 2),
          translatedAtts = _getTranslatedValues2[0],
          translatedValues = _getTranslatedValues2[1]; // конвертировать content в рав если требуется при маунтинг


      useEffect(function () {
        if (!hasRaw(rawRef)) {
          var _createRawContent = createRawContent(qtxLang, translatedValues, translatedAtts),
              _createRawContent2 = _slicedToArray(_createRawContent, 2),
              raw = _createRawContent2[0],
              update = _createRawContent2[1];

          rawRef.current.raw = raw;
          setAttributes(_objectSpread2({
            qtxLang: qtxLang,
            qtxRaw: raw
          }, update));
          Zubug.data({
            lang: qtxLang,
            raw: raw,
            update: update
          }, 'Raw created');
        } // we used a spread element in the dependency array -> we can't statically verify the correct dependencies
        // eslint-disable-next-line react-hooks/exhaustive-deps

      }, []); // After each change in one of the attributes that require the translation, we update 'qtxRaw'

      useEffect(function () {
        // Zubug.info('attributes changed', translatedValues, rawRef);
        if (hasRaw(rawRef)) {
          var _rawRef$current = rawRef.current,
              raw = _rawRef$current.raw,
              lang = _rawRef$current.lang;
          var updatedRaw = updateRawContent(raw, lang, translatedValues);

          if (updatedRaw !== rawRef.current.raw) {
            rawRef.current.raw = updatedRaw;
            setAttributes({
              qtxRaw: updatedRaw
            });
            Zubug.data({
              updatedRaw: updatedRaw
            }, 'Raw updated');
          }
        } // we used a spread element in the dependency array -> we can't statically verify the correct dependencies
        // eslint-disable-next-line react-hooks/exhaustive-deps

      }, [].concat(_toConsumableArray(translatedValues), [setAttributes])); // Replace the values of all 'translated' attributes for the required language

      var replaceContent = useCallback$1(function (lang) {
        var raw = rawRef.current.raw; // const lang = qtxLang === 'en' ? 'ru' : 'en';

        var atts = switchContent(raw, lang, translatedAtts);
        rawRef.current.lang = lang;
        setAttributes(_objectSpread2({
          qtxLang: lang
        }, atts));
      }, [translatedAtts, setAttributes]);
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(BlockEdit, props), isSelected && isSupported(name) && /*#__PURE__*/React.createElement(InspectorControls, null, /*#__PURE__*/React.createElement(LangControl.Panel, {
        lang: qtxLang,
        onClick: replaceContent
      })));
    };
  }, 'withRawEditControls'); // <ToggleControl

  // WordPress dependencies
  var _lodash$2 = lodash,
      isNil$1 = _lodash$2.isNil,
      assign = _lodash$2.assign; // const { __ } = wp.i18n;

  var addFilter = wp.hooks.addFilter; // const { useEffect, useCallback } = wp.element; // cloneElement, useState, useEffect, useLayoutEffect

  var _wp$data$1 = wp.data,
      select = _wp$data$1.select,
      subscribe = _wp$data$1.subscribe; //

  function addRawAttribute(settings, name) {
    if (!isNil$1(settings.attributes)) {
      if (isSupported(name)) {
        // Zubug.data({ settings });
        settings.attributes = assign({}, settings.attributes, {
          qtxRaw: {
            type: 'string'
          },
          qtxLang: {
            type: 'string'
          }
        });
      }
    }

    return settings;
  } // const filterBlocks = (settings) => {
  //     console.log(settings.name)
  //     // we need to pass along the settings object
  //     // even if we haven't modified them!
  //     return settings;
  // }
  //
  // addFilter(
  //     'blocks.registerBlockType', // hook name, very important!
  //     'zu/test', // your name, very arbitrary!
  //     filterBlocks // function to run
  // );


  addFilter('blocks.registerBlockType', 'zu/paragraph', addRawAttribute);
  addFilter('editor.BlockEdit', 'zu/paragraph', withRawEditControls); // NOTE: All experiments left here --------------------------------------------]

  var _select = select('core/editor'),
      isSavingPost = _select.isSavingPost;

  var postSaved = true;
  subscribe(function () {
    if (isSavingPost()) {
      postSaved = false;
      Zubug.info('{isSavingPost}');
    } else {
      if (!postSaved) {
        Zubug.info('~Post Saved~');
        postSaved = true;
      }
    }
  }); // function applyExtraProps(extraProps, blockType, attributes) {
  // 	const {
  // 		content,
  // 		rawContent,
  // 		lang,
  // 	} = attributes;
  // 	if(isSupported(blockType?.name)) {
  // 		Zubug.data({ extraProps, blockType, attributes });
  // 	}
  //
  // 	const blocks = qtranxj_split(rawContent);
  // 	blocks[lang] = content;
  // 	const newLang = lang === 'en' ? 'ru' : 'en';
  // 	Zubug.data({ lang, content,  blocks });
  // 	extraProps.className join([...map(blocks, (text, l) => `[:${l}]${text}`), '[:]'], '')
  //
  // 	if(typeof hideOnMobile !== 'undefined' && hideOnMobile) {
  // 		extraProps.className = extraProps.className + ' hide-on-mobile';
  // 	}
  // 	return extraProps;
  // }
  // addFilter('blocks.getSaveContent.extraProps', 'zu/paragraph', applyExtraProps);
  // function getBlockAttributes(attributes, blockType, param3, param4) {
  // 	if(isSupported(blockType?.name)) {
  // 		const { content, rawContent, lang } = attributes;
  // 		const translated = rawContent ? getLangContent(rawContent, lang) : content;
  // 		attributes.content = translated;
  // 		Zubug.data({ attributes, blockType, param3, param4 });
  // 		return attributes;
  // 	}
  // 	return attributes;
  // }
  // addFilter('blocks.getBlockAttributes', 'zu/paragraph', getBlockAttributes);
  // function getSaveElement(elem, blockType, attributes) {
  // 	const blockName = blockType?.name;
  // 	if(isSupported(blockName)) {
  // 		// Zubug.info('called');
  // 		if(attributes.isXT) {
  // 			// const fallback = () => elem;
  // 			const { rawContent } = attributes;
  // 			const isEdit = !!rawContent;
  // 			// // const save = get(blockSave, blockName) ?? fallback;
  // 			Zubug.info(isSavingPost() ? '{isSavingPost}' : 'update?');
  // 			if(isEdit) {
  // 				attributes.content = rawContent;
  // 				// attributes.rawContent = undefined;
  // 				const newEl = cloneElement(elem, { attributes });
  // 				Zubug.data({ content: attributes.content, rawContent: attributes.rawContent }, 'new Element');
  // 				return newEl;
  // 			}
  // 		}
  // 	}
  // 	return elem;
  // }
  // addFilter('blocks.getSaveElement', 'zu/paragraph', getSaveElement);

  // WordPress dependencies
  var _lodash$3 = lodash,
      defaults = _lodash$3.defaults;
  var registerPlugin = wp.plugins.registerPlugin; // const { registerBlockType } = wp.blocks;
  // Import debug object and make it available from global scope

  window.Zubug = _objectSpread2({}, wp.zukit.debug || {}); // Internal dependencies

  function registerPlugins() {
    [plugin // status,
    ].forEach(function (sidebar) {
      if (!sidebar) return;
      var name = sidebar.name,
          settings = sidebar.settings; // we need to pass {icon: false} if the attribute is missed to avoid rendering the default icon

      registerPlugin(name, defaults(settings, {
        icon: false
      }));
    });
  } // Register ZU blocks collection or category
  // const supportsCollections = registerCollection();
  // if(!supportsCollections) registerCategory();
  //  Register Blocks -----------------------------------------------------------]
  // import * as form from './blocks/form/index.js';
  // import * as recaptcha from './blocks/field-recaptcha/index.js';
  //
  // export function registerBlocks() {
  // 	[
  // 		form,
  // 		recaptcha,
  //
  // 	].forEach(block => {
  //
  // 		if(!block) return;
  //
  // 		const { name, settings } = block;
  // 		if(!supportsCollections) settings.category = brandAssets.slug;
  // 		registerBlockType(name, settings);
  //
  // 	} );
  // }
  //

  registerPlugins(); // registerBlocks();

  exports.registerPlugins = registerPlugins;

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;

}({}));
//# sourceMappingURL=zutranslate-blocks.min.js.map
