(function () {
	'use strict';

	// WordPress dependencies
	// const { map, has } = lodash;
	var __$2 = wp.i18n.__; // Zukit dependencies

	var simpleMarkdown$2 = wp.zukit.utils.simpleMarkdown;
	var externalDataSettings = wp.zukit.render.externalDataSettings; // Settings page strings and assets

	var _externalDataSettings = externalDataSettings('zutranslate', {}),
	    pluginInacive = _externalDataSettings.disabled,
	    qtxUrl = _externalDataSettings.qtxlink;

	var inacive$1 = __$2('This plugin only *complements* the functionality of the **qTranslate-XT** plugin.\nThe [qTranslate-XT]($link1) version `3.10 or above` should be installed and activated (now it **was not found** among active plugins).', 'zu-translate');

	var options = {
	  gutenberg: {
	    label: __$2('Support WordPress Block Editor', 'zu-translate'),
	    help: __$2('Settings and list of supported blocks see below in the "**Block Editor Support**" section.', 'zu-translate')
	  },
	  flags: {
	    label: __$2('Show flags in buttons', 'zu-translate'),
	    help: __$2('Display country flag on language switching buttons in admin mode.', 'zu-translate')
	  },
	  appearance: {
	    label: __$2('Custom button appearance', 'zu-translate'),
	    help: __$2('Change the appearance of the buttons for language switching in admin mode.', 'zu-translate')
	  },
	  large: {
	    label: __$2('Large custom button size', 'zu-translate'),
	    help: __$2('Enlarge the size of the buttons (*for those who prefer more*).', 'zu-translate'),
	    depends: 'appearance'
	  },
	  list: {
	    label: __$2('Add "Language Switcher" to post/pages list', 'zu-translate'),
	    help: __$2('Ability to switch language on a list of posts/pages and support for **Quick Edit**.', 'zu-translate')
	  } // NOTE: not yet restored after refactoring
	  // media_details: {
	  // 	label: 	__('Language Switcher in Media Details', 'zu-translate'),
	  // 	help:	__('When activated you will not be able to edit the fields when viewing the modal dialog, only on `Edit Media` page.', 'zu-translate'),
	  // },
	  // yseo: {
	  // 	label: 	__('Include additional support for Yoast SEO Plugin?', 'zu-translate'),
	  // 	help:	__('The Yoast SEO should be installed and activated.', 'zu-translate'),
	  // },

	}; // NOTE: not yet restored after refactoring
	// 'Customization & settings for Language Switcher.'

	var switcher = {
	  ls_frontend: {
	    label: __$2('Swither on Front-End?', 'zu-translate'),
	    help: __$2('???', 'zu-translate')
	  },
	  ls_menu: {
	    label: __$2('Swither in Menu?', 'zu-translate'),
	    help: __$2('The switcher should be added in menu to be displayed.', 'zu-translate')
	  },
	  ls_display: {
	    // [
	    // 	'lang' 	=> 'Language Name',
	    // 	'code' 	=> 'Language Code',
	    // ],
	    label: __$2('Display in Menu', 'zu-translate'),
	    help: __$2('How the language will be dispayed in menu', 'zu-translate')
	  } // custom_css: {
	  // 	label: 	__('Use plugin CSS?', 'zu-translate'),
	  // 	help:	__('If switched off the plugin stylesheet won\'t be loaded.', 'zu-translate'),
	  // },

	};
	var gutenberg$1 = {
	  note: __$2('Only blocks **known to this plugin** will support language switching in the **Block Editor**.\nTo disable the block support - turn off the **checkbox** in front of the block name. You can also add other blocks - for this you need to know the **internal** name of the block (which includes the `namespace`) and the name of the attribute/attributes that contain the **content** of the block (**what requires translation**). You can learn these names by looking at the source code of the plugin/themes where these blocks are defined or by contacting the developer.\n*Unfortunately, a simpler method has not yet been found.*', 'zu-translate'),
	  blockTitle: __$2('Supported blocks', 'zu-translate'),
	  moreTitle: __$2('Add more blocks', 'zu-translate'),
	  compress: __$2('Compress language data to reduce page size', 'zu-translate'),
	  toggles: ['sync', 'initial', 'session', 'unsaved', 'nobackups'],
	  sync: {
	    label: __$2('Synchronize language switching', 'zu-translate'),
	    help: __$2('Switching a language in one block will lead to language switching in all editable blocks.', 'zu-translate')
	  },
	  initial: {
	    label: __$2('Open language panel', 'zu-translate'),
	    help: __$2('Whether or not the language switching panel will start open.', 'zu-translate')
	  },
	  session: {
	    label: __$2('Support session language', 'zu-translate'),
	    help: __$2('During one session, language switching on different pages will be synchronized.', 'zu-translate')
	  },
	  unsaved: {
	    label: __$2('Switch without changes', 'zu-translate'),
	    help: __$2('Do not consider language switching as **unsaved** changes for the current edit session.', 'zu-translate')
	  },
	  nobackups: {
	    label: __$2('Remove Block Editor "backups"', 'zu-translate'),
	    help: __$2('Removes Wordpress *autosaves* and *backups* notices which could be very annoying.\nYou should understand what you are doing.', 'zu-translate')
	  },
	  custom: {
	    nameLabel: __$2('Block name', 'zu-translate'),
	    nameHelp: __$2('The block name must contain a **namespace** and a **slash**, for example, `core/quote`', 'zu-translate'),
	    attsLabel: __$2('Attribute names', 'zu-translate'),
	    attsInput: __$2('Enter the name of the attribute', 'zu-translate'),
	    attsInputHelp: __$2('Usually the attribute has the name `content`, but it is not always so (see note above)', 'zu-translate'),
	    addBlock: __$2('Add block', 'zu-translate')
	  },
	  resetAll: __$2('Reset Block Editor Settings', 'zu-translate'),
	  errName: __$2('It does not look like a valid **block name**. Maybe you forgot the `namespace`? ', 'zu-translate'),
	  errAtts: __$2('You need to specify at least one **attribute** for translation.', 'zu-translate'),
	  errDups: __$2('Duplicates are not allowed. Are you mistaken in the name of the block?', 'zu-translate')
	};
	var convert = {
	  buttonLabel: __$2('Convert Classic Blocks', 'zu-translate'),
	  buttonHelp: __$2('Convert all **Classic Blocks** to Gutenberg blocks. Regular text will be replaced with `core/paragraph`, headings with `core/heading` and shortcodes with `core/shortcode` blocks.', 'zu-translate'),
	  action: __$2('Convert', 'zu-translate'),
	  title: __$2('Select options for conversion', 'zu-translate'),
	  onlySelected: __$2('Convert only selected posts', 'zu-translate'),
	  typeLabel: __$2('Select a type for conversion', 'zu-translate'),
	  primaryLabel: __$2('Select a primary language', 'zu-translate'),
	  primaryHelp: __$2('The contents of the block for this language will be used as a **basis** for conversion.', 'zu-translate')
	};
	var panels = {
	  gutenberg: {
	    value: true,
	    label: __$2('Block Editor Support', 'zu-translate'),
	    // this allows the panel to be excluded when the option is false
	    depends: 'gutenberg'
	  },
	  switcher: {
	    value: false,
	    label: __$2('Language Switcher', 'zu-translate')
	  }
	};
	var zutranslate = {
	  options: options,
	  panels: panels,
	  switcher: switcher,
	  gutenberg: gutenberg$1,
	  convert: convert,
	  inacive: pluginInacive ? simpleMarkdown$2(inacive$1, {
	    br: true,
	    links: qtxUrl
	  }) : false
	};

	function ownKeys(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    enumerableOnly && (symbols = symbols.filter(function (sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    })), keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread2(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = null != arguments[i] ? arguments[i] : {};
	    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
	      _defineProperty(target, key, source[key]);
	    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
	      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	    });
	  }

	  return target;
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _slicedToArray(arr, i) {
	  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
	}

	function _toConsumableArray(arr) {
	  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
	}

	function _arrayWithoutHoles(arr) {
	  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
	}

	function _arrayWithHoles(arr) {
	  if (Array.isArray(arr)) return arr;
	}

	function _iterableToArray(iter) {
	  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
	}

	function _iterableToArrayLimit(arr, i) {
	  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

	  if (_i == null) return;
	  var _arr = [];
	  var _n = true;
	  var _d = false;

	  var _s, _e;

	  try {
	    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);

	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }

	  return _arr;
	}

	function _unsupportedIterableToArray(o, minLen) {
	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
	  var n = Object.prototype.toString.call(o).slice(8, -1);
	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return Array.from(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
	}

	function _arrayLikeToArray(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

	  return arr2;
	}

	function _nonIterableSpread() {
	  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	function _nonIterableRest() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	// WordPress dependencies
	var _lodash$1 = lodash,
	    isEmpty$1 = _lodash$1.isEmpty,
	    castArray = _lodash$1.castArray,
	    get = _lodash$1.get,
	    has = _lodash$1.has,
	    map$1 = _lodash$1.map,
	    mapKeys = _lodash$1.mapKeys,
	    join = _lodash$1.join,
	    split = _lodash$1.split,
	    compact = _lodash$1.compact,
	    includes$1 = _lodash$1.includes,
	    without = _lodash$1.without,
	    pick$1 = _lodash$1.pick,
	    omit = _lodash$1.omit,
	    keys = _lodash$1.keys;
	var __$1 = wp.i18n.__;
	var _wp$components$1 = wp.components,
	    Button$1 = _wp$components$1.Button,
	    CheckboxControl = _wp$components$1.CheckboxControl,
	    PanelBody = _wp$components$1.PanelBody;
	var _wp$element$1 = wp.element,
	    useCallback$1 = _wp$element$1.useCallback,
	    useState$1 = _wp$element$1.useState; // Zukit dependencies

	var toggleOption$1 = wp.zukit.render.toggleOption;
	var _wp$zukit$components$1 = wp.zukit.components,
	    ZukitPanel$1 = _wp$zukit$components$1.ZukitPanel,
	    AdvTextControl = _wp$zukit$components$1.AdvTextControl,
	    ListInputControl = _wp$zukit$components$1.ListInputControl;
	var _wp$zukit$utils$1 = wp.zukit.utils,
	    simpleMarkdown$1 = _wp$zukit$utils$1.simpleMarkdown,
	    getExternalData$1 = _wp$zukit$utils$1.getExternalData,
	    messageWithError = _wp$zukit$utils$1.messageWithError;
	var scrollTop = wp.zukit.jq.scrollTop;
	var blockEditorKey = 'blockeditor';
	var supported = getExternalData$1('supported', {});

	function contentAtts(atts) {
	  var comment = __$1('Content attributes:', 'zu-translate');

	  return simpleMarkdown$1("".concat(comment, "`").concat(join(castArray(atts), '` `'), "`"));
	}

	function testCustomBlock(name, blockAtts, customBlocks) {
	  var nameRegex = /^(?!\d)[\w$]+\/(?!\d)[\w$]+$/;
	  var atts = compact(split(blockAtts, ','));
	  var error = nameRegex.test(name) ? null : {
	    msg: 'errName',
	    value: isEmpty$1(name) ? null : name
	  };
	  if (error === null && has(customBlocks, name)) error = {
	    msg: 'errDups',
	    value: name
	  };
	  if (error === null && atts.length === 0) error = {
	    msg: 'errAtts',
	    value: null
	  };
	  return {
	    name: name,
	    atts: atts,
	    error: error
	  };
	}

	var ZutranslateBlockEditor = function ZutranslateBlockEditor(_ref) {
	  var data = _ref.data,
	      options = _ref.options,
	      updateOptions = _ref.updateOptions,
	      resetOptions = _ref.resetOptions,
	      ajaxAction = _ref.ajaxAction,
	      noticeOperations = _ref.noticeOperations;
	  var createNotice = noticeOperations.createNotice;
	  var beOptions = get(options, blockEditorKey, {});
	  var excludedBlocks = beOptions.excluded,
	      customBlocks = beOptions.custom;

	  var _useState = useState$1(''),
	      _useState2 = _slicedToArray(_useState, 2),
	      customName = _useState2[0],
	      setCustomName = _useState2[1];

	  var _useState3 = useState$1(''),
	      _useState4 = _slicedToArray(_useState3, 2),
	      customAtts = _useState4[0],
	      setCustomAtts = _useState4[1];

	  var _useState5 = useState$1(supported),
	      _useState6 = _slicedToArray(_useState5, 2),
	      supportedBlocks = _useState6[0],
	      setSupportedBlocks = _useState6[1];

	  var resetBEOptions = useCallback$1(function () {
	    resetOptions(blockEditorKey, function () {
	      return ajaxAction('zutranslate_reset_supported', function (blocks) {
	        setSupportedBlocks(blocks);
	        scrollTop();
	      });
	    });
	  }, [resetOptions, ajaxAction]);
	  var updateBEOptions = useCallback$1(function (update) {
	    var folderUpdate = mapKeys(update, function (_, key) {
	      return "".concat(blockEditorKey, ".").concat(key);
	    });
	    updateOptions(folderUpdate);
	  }, [updateOptions]);
	  var excludeBlock = useCallback$1(function (checked, block) {
	    if (checked) updateBEOptions({
	      excluded: without(excludedBlocks, block)
	    });else updateBEOptions({
	      excluded: [].concat(_toConsumableArray(excludedBlocks), [block])
	    });
	  }, [excludedBlocks, updateBEOptions]);
	  var addBlock = useCallback$1(function () {
	    var _testCustomBlock = testCustomBlock(customName, customAtts, customBlocks),
	        name = _testCustomBlock.name,
	        atts = _testCustomBlock.atts,
	        error = _testCustomBlock.error;

	    if (error === null) {
	      updateBEOptions({
	        custom: _objectSpread2(_objectSpread2({}, customBlocks), {}, _defineProperty({}, name, {
	          title: name,
	          atts: atts
	        }))
	      });
	      setCustomName('');
	      setCustomAtts('');
	    } else {
	      // Can be one of: success, info, warning, error
	      createNotice({
	        status: 'warning',
	        content: messageWithError(data[error.msg], error.value),
	        isDismissible: true,
	        __unstableHTML: true
	      });
	      scrollTop();
	    }
	  }, [customBlocks, customName, customAtts, updateBEOptions, createNotice, data]);
	  var standardBlocks = omit(supportedBlocks, keys(customBlocks));
	  var hasCustomBlocks = !isEmpty$1(customBlocks);
	  return /*#__PURE__*/React.createElement(ZukitPanel$1, {
	    id: "gutenberg",
	    options: options,
	    initialOpen: true
	  }, toggleOption$1(pick$1(data, data.toggles), beOptions, updateBEOptions), /*#__PURE__*/React.createElement("div", {
	    className: "__note"
	  }, simpleMarkdown$1(data.note, {
	    br: true
	  })), /*#__PURE__*/React.createElement(PanelBody, {
	    className: "__subtitle",
	    title: data.blockTitle,
	    initialOpen: false
	  }, /*#__PURE__*/React.createElement("div", {
	    className: "__supported"
	  }, map$1(standardBlocks, function (_ref2, key) {
	    var title = _ref2.title,
	        atts = _ref2.atts;
	    return /*#__PURE__*/React.createElement(CheckboxControl, {
	      key: key,
	      label: title,
	      help: contentAtts(atts),
	      checked: !includes$1(excludedBlocks, key),
	      onChange: function onChange(value) {
	        return excludeBlock(value, key);
	      }
	    });
	  }))), hasCustomBlocks && /*#__PURE__*/React.createElement("div", {
	    className: "__supported"
	  }, map$1(customBlocks, function (_ref3, key) {
	    var title = _ref3.title,
	        atts = _ref3.atts;
	    return /*#__PURE__*/React.createElement(CheckboxControl, {
	      key: key,
	      label: title,
	      help: contentAtts(atts),
	      checked: !includes$1(excludedBlocks, key),
	      onChange: function onChange(value) {
	        return excludeBlock(value, key);
	      }
	    });
	  })), /*#__PURE__*/React.createElement(PanelBody, {
	    className: "__subtitle",
	    title: data.moreTitle,
	    initialOpen: false
	  }, /*#__PURE__*/React.createElement("div", {
	    className: "__custom"
	  }, /*#__PURE__*/React.createElement(AdvTextControl, {
	    label: data.custom.nameLabel,
	    help: simpleMarkdown$1(data.custom.nameHelp, {
	      br: true
	    }),
	    value: customName,
	    onChange: setCustomName,
	    onKeyEnter: addBlock
	  }), /*#__PURE__*/React.createElement(ListInputControl, {
	    isOpen: true,
	    isNotEmptyLabel: true,
	    strict: /^(?!\d)[\w$]+$/,
	    label: data.custom.attsLabel,
	    inputLabel: simpleMarkdown$1(data.custom.attsInput, {
	      br: true
	    }),
	    inputHelp: simpleMarkdown$1(data.custom.attsInputHelp, {
	      br: true
	    }),
	    value: customAtts,
	    onChange: setCustomAtts
	  }), /*#__PURE__*/React.createElement(Button$1, {
	    isSecondary: true,
	    className: "__plugin_actions __auto green",
	    label: data.custom.addBlock,
	    icon: "plus-alt",
	    onClick: addBlock
	  }, data.custom.addBlock))), /*#__PURE__*/React.createElement("div", {
	    className: "__flex __right"
	  }, /*#__PURE__*/React.createElement(Button$1, {
	    isSecondary: true,
	    className: "__plugin_actions __auto magenta",
	    label: data.resetAll,
	    icon: "image-rotate",
	    onClick: resetBEOptions
	  }, data.resetAll)));
	};

	// WordPress dependencies
	var _lodash = lodash,
	    isEmpty = _lodash.isEmpty,
	    map = _lodash.map,
	    reject = _lodash.reject,
	    find = _lodash.find,
	    pick = _lodash.pick,
	    includes = _lodash.includes,
	    reduce = _lodash.reduce;
	var _wp$i18n = wp.i18n,
	    __ = _wp$i18n.__,
	    sprintf = _wp$i18n.sprintf;
	var _wp$components = wp.components,
	    Popover = _wp$components.Popover,
	    Button = _wp$components.Button,
	    SelectControl = _wp$components.SelectControl;
	var _wp$element = wp.element,
	    useState = _wp$element.useState,
	    useRef = _wp$element.useRef,
	    useCallback = _wp$element.useCallback;
	var useSelect = wp.data.useSelect; // Zukit dependencies
	// window.Zubug = { ...(wp.zukit.debug  || {}) };

	var closeIcon = wp.zukit.icons.close;
	var _wp$zukit$utils = wp.zukit.utils,
	    getExternalData = _wp$zukit$utils.getExternalData,
	    simpleMarkdown = _wp$zukit$utils.simpleMarkdown;
	var _wp$zukit$components = wp.zukit.components,
	    ZukitSidebar = _wp$zukit$components.ZukitSidebar,
	    ZukitToggle = _wp$zukit$components.ZukitToggle;
	var convertPrefix = 'zutranslate_convert';
	var buttonIcon = 'superhero';
	var rejectTypes = ['attachment', 'wp_block', 'nav_menu_item', 'wp_template', 'wp_template_part', 'wp_navigation'];
	var loadingOptions = [{
	  value: 0,
	  label: 'Loading...'
	}];
	var enabledLangs = reduce(getExternalData('qtxlangs', {}), function (options, val) {
	  options.push({
	    value: val.code,
	    label: val.name,
	    active: val.active
	  });
	  return options;
	}, []);

	function decodeHtml(html) {
	  var txt = document.createElement('textarea');
	  txt.innerHTML = html;
	  return txt.value;
	}

	var ZutranslateConvert = function ZutranslateConvert(_ref) {
	  var _find;

	  var data = _ref.data,
	      ajaxAction = _ref.ajaxAction;

	  // Zubug.data({ data });
	  var _useState = useState(false),
	      _useState2 = _slicedToArray(_useState, 2),
	      isOpen = _useState2[0],
	      setIsOpen = _useState2[1];

	  var dataRef = useRef({
	    types: null,
	    posts: null
	  });

	  var _useState3 = useState(0),
	      _useState4 = _slicedToArray(_useState3, 2),
	      postType = _useState4[0],
	      setPostType = _useState4[1];

	  var _useState5 = useState(''),
	      _useState6 = _slicedToArray(_useState5, 2),
	      selectLabel = _useState6[0],
	      setSelectLabel = _useState6[1];

	  var _useState7 = useState(false),
	      _useState8 = _slicedToArray(_useState7, 2),
	      onlySelected = _useState8[0],
	      setOnlySelected = _useState8[1];

	  var _useState9 = useState(0),
	      _useState10 = _slicedToArray(_useState9, 2),
	      selectedId = _useState10[0],
	      setSelectedId = _useState10[1];

	  var _useState11 = useState((_find = find(enabledLangs, ['active', true])) === null || _find === void 0 ? void 0 : _find.value),
	      _useState12 = _slicedToArray(_useState11, 2),
	      primaryLang = _useState12[0],
	      setPrimaryLang = _useState12[1];

	  var anchorRef = useRef(null);
	  var typeOptions = useSelect(function (select) {
	    if ((dataRef === null || dataRef === void 0 ? void 0 : dataRef.current.types) === null) {
	      var types = select('core').getPostTypes();

	      if (!isEmpty(types)) {
	        var selectedTypes = reject(map(types, function (t) {
	          return pick(t, ['name', 'slug', 'labels']);
	        }), // remove unused properties and types (Media & Block)
	        function (r) {
	          return includes(rejectTypes, r.slug);
	        });
	        dataRef.current.types = reduce(selectedTypes, function (options, val) {
	          options.push({
	            value: val.slug,
	            label: val.labels.singular_name
	          });
	          return options;
	        }, [{
	          value: 0,
	          label: 'Select type'
	        }]);
	      }
	    }

	    return dataRef !== null && dataRef !== void 0 && dataRef.current.types ? dataRef.current.types : loadingOptions;
	  });
	  var selectPostType = useCallback(function (value) {
	    var _find2;

	    var label = (_find2 = find(typeOptions, {
	      value: value
	    })) === null || _find2 === void 0 ? void 0 : _find2.label.toLowerCase();
	    setPostType(value);
	    setSelectLabel([sprintf(__('Select the %s for conversion', 'zu-translate'), label), sprintf(__('Select %s', 'zu-translate'), label)]);
	    dataRef.current.posts = null;
	  }, [typeOptions]);

	  var _useSelect = useSelect(function (select) {
	    var _select = select('core'),
	        getEntityRecords = _select.getEntityRecords,
	        hasFinishedResolution = _select.hasFinishedResolution;

	    var postsParameters = ['postType', postType];

	    if (postType && onlySelected && (dataRef === null || dataRef === void 0 ? void 0 : dataRef.current.posts) === null) {
	      var posts = getEntityRecords.apply(void 0, postsParameters);

	      if (!isEmpty(posts)) {
	        dataRef.current.posts = reduce(posts, function (options, val) {
	          options.push({
	            value: val.id,
	            label: decodeHtml(val.title.rendered)
	          });
	          return options;
	        }, [{
	          value: 0,
	          label: selectLabel[1]
	        }]);
	      }
	    }

	    return {
	      postOptions: dataRef === null || dataRef === void 0 ? void 0 : dataRef.current.posts,
	      hasResolved: postType && onlySelected && hasFinishedResolution('getEntityRecords', postsParameters)
	    };
	  }, [postType, onlySelected, selectLabel]),
	      postOptions = _useSelect.postOptions,
	      hasResolved = _useSelect.hasResolved;

	  var openLinkUI = useCallback(function () {
	    setIsOpen(!isOpen);
	  }, [isOpen]);
	  var closeLinkUI = useCallback(function () {
	    setIsOpen(false);
	  }, []);
	  var convertPost = useCallback(function () {
	    closeLinkUI();
	    ajaxAction({
	      action: 'zutranslate_convert_classic',
	      value: {
	        id: onlySelected ? selectedId : 0,
	        postType: postType,
	        primaryLang: primaryLang
	      }
	    });
	  }, [selectedId, postType, primaryLang, onlySelected, ajaxAction, closeLinkUI]);
	  var conversionDisabled = onlySelected ? selectedId === 0 : postType === 0;
	  return /*#__PURE__*/React.createElement(ZukitSidebar.MoreActions, null, /*#__PURE__*/React.createElement(ZukitSidebar.ActionButton, {
	    color: "magenta",
	    icon: buttonIcon,
	    onClick: openLinkUI,
	    label: data.buttonLabel,
	    help: data.buttonHelp,
	    ref: anchorRef
	  }), isOpen && /*#__PURE__*/React.createElement(Popover, {
	    position: "middle left",
	    noArrow: false,
	    onClose: closeLinkUI,
	    anchorRect: anchorRef.current ? anchorRef.current.getBoundingClientRect() : null,
	    focusOnMount: false
	  }, /*#__PURE__*/React.createElement("div", {
	    className: convertPrefix
	  }, /*#__PURE__*/React.createElement("div", {
	    className: "__title"
	  }, /*#__PURE__*/React.createElement("span", null, data.title), /*#__PURE__*/React.createElement(Button, {
	    className: "__close",
	    icon: closeIcon,
	    onClick: closeLinkUI
	  })), /*#__PURE__*/React.createElement("div", {
	    className: "__body"
	  }, /*#__PURE__*/React.createElement(SelectControl, {
	    label: data.typeLabel,
	    value: postType,
	    onChange: selectPostType,
	    options: typeOptions
	  }), !!postType && /*#__PURE__*/React.createElement(ZukitToggle, {
	    label: data.onlySelected,
	    checked: onlySelected,
	    onChange: function onChange() {
	      return setOnlySelected(!onlySelected);
	    }
	  }), onlySelected && /*#__PURE__*/React.createElement(SelectControl, {
	    label: selectLabel[0],
	    value: selectedId,
	    onChange: setSelectedId,
	    options: hasResolved ? postOptions : loadingOptions
	  }), /*#__PURE__*/React.createElement(SelectControl, {
	    className: "__lang",
	    label: data.primaryLabel,
	    help: simpleMarkdown(data.primaryHelp),
	    value: primaryLang,
	    onChange: setPrimaryLang,
	    options: enabledLangs
	  }), /*#__PURE__*/React.createElement("div", {
	    className: "__submit"
	  }, /*#__PURE__*/React.createElement(Button, {
	    isPrimary: true,
	    disabled: conversionDisabled,
	    icon: "editor-table",
	    onClick: convertPost
	  }, data.action))))));
	};

	// WordPress dependencies
	// const { get } = lodash;
	// Zukit dependencies
	var _wp$zukit$render = wp.zukit.render,
	    renderPage = _wp$zukit$render.renderPage,
	    toggleOption = _wp$zukit$render.toggleOption;
	var ZukitPanel = wp.zukit.components.ZukitPanel; // Internal dependencies
	var optionsData = zutranslate.options,
	    gutenberg = zutranslate.gutenberg,
	    inacive = zutranslate.inacive,
	    convertData = zutranslate.convert; // switcher,

	var ZutranslateEdit = function ZutranslateEdit(_ref) {
	  var title = _ref.title,
	      options = _ref.options,
	      updateOptions = _ref.updateOptions,
	      resetOptions = _ref.resetOptions,
	      ajaxAction = _ref.ajaxAction,
	      noticeOperations = _ref.noticeOperations;

	  if (inacive) {
	    return /*#__PURE__*/React.createElement("div", {
	      className: "__note"
	    }, inacive);
	  }

	  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ZukitPanel, {
	    title: title
	  }, toggleOption(optionsData, options, updateOptions)), /*#__PURE__*/React.createElement(ZutranslateBlockEditor, {
	    data: gutenberg,
	    options: options,
	    updateOptions: updateOptions,
	    resetOptions: resetOptions,
	    noticeOperations: noticeOperations,
	    ajaxAction: ajaxAction
	  }), /*#__PURE__*/React.createElement(ZutranslateConvert, {
	    data: convertData,
	    ajaxAction: ajaxAction
	  }));
	};

	renderPage('zutranslate', {
	  edit: ZutranslateEdit,
	  panels: zutranslate.panels
	});

})();
//# sourceMappingURL=zutranslate.min.js.map
