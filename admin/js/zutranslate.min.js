(function () {
	'use strict';

	// WordPress dependencies
	// const { map, has } = lodash;
	var __$1 = wp.i18n.__; // Zukit dependencies

	var simpleMarkdown$1 = wp.zukit.utils.simpleMarkdown;
	var externalDataSettings = wp.zukit.render.externalDataSettings; // Settings page strings and assets

	var _externalDataSettings = externalDataSettings('zutranslate', {}),
	    pluginInacive = _externalDataSettings.disabled,
	    qtxUrl = _externalDataSettings.qtxlink; // 'The plugin extend functionality of qTranslate-XT plugin.'
	// 'Customization & settings for Language Switcher.'


	var inacive$1 = __$1('This plugin only *complements* the functionality of the **qTranslate-XT** plugin.\nThe [qTranslate-XT]($link1) version `3.10 or above` should be installed and activated (now it **was not found** among active plugins).', 'zu-translate');

	var options = {
	  flags: {
	    label: __$1('Show flags in buttons?', 'zu-translate'),
	    help: __$1('Display country flag on language switching buttons in admin mode.', 'zu-translate')
	  },
	  gutenberg: {
	    label: __$1('Support qTranslate-XT for WordPress Block Editor', 'zu-translate'),
	    help: __$1('Only blocks known to this plugin will support switching languages in the Block Editor.', 'zu-translate')
	  },
	  media_details: {
	    label: __$1('Add Language Switcher in Media Details?', 'zu-translate'),
	    help: __$1('When activated you will not be able to edit the fields when viewing the modal dialog, only on `Edit Media` page.', 'zu-translate')
	  } // NOTE: not yet restored after refactoring
	  // yseo: {
	  // 	label: 	__('Include additional support for Yoast SEO Plugin?', 'zu-translate'),
	  // 	help:	__('The Yoast SEO should be installed and activated.', 'zu-translate'),
	  // },

	}; // NOTE: not yet restored after refactoring

	var switcher = {
	  ls_frontend: {
	    label: __$1('Swither on Front-End?', 'zu-translate'),
	    help: __$1('???', 'zu-translate')
	  },
	  ls_menu: {
	    label: __$1('Swither in Menu?', 'zu-translate'),
	    help: __$1('The switcher should be added in menu to be displayed.', 'zu-translate')
	  },
	  ls_display: {
	    // [
	    // 	'lang' 	=> 'Language Name',
	    // 	'code' 	=> 'Language Code',
	    // ],
	    label: __$1('Display in Menu', 'zu-translate'),
	    help: __$1('How the language will be dispayed in menu', 'zu-translate')
	  } // custom_css: {
	  // 	label: 	__('Use plugin CSS?', 'zu-translate'),
	  // 	help:	__('If switched off the plugin stylesheet won\'t be loaded.', 'zu-translate'),
	  // },

	};
	var gutenberg$1 = {
	  note: __$1('Only blocks known to this plugin will support switching languages in the Block Editor.', 'zu-translate'),
	  blockTitle: __$1('Supported blocks', 'zu-translate'),
	  compress: __$1('Compress language data to reduce page size', 'zu-translate'),
	  // themeOptions: [
	  // 	{ value: 'light', label: __('Light Theme', 'zu-translate') },
	  // 	{ value: 'dark', label: __('Dark Theme', 'zu-translate') },
	  // ],
	  resetAll: __$1('Reset Block Editor Settings', 'zu-translate')
	};
	var panels = {
	  gutenberg: {
	    value: true,
	    label: __$1('Block Editor Support', 'zu-translate'),
	    // Это позволит исключить эту панель когда значение option is false
	    depends: 'gutenberg'
	  },
	  switcher: {
	    value: false,
	    label: __$1('Language Switcher', 'zu-translate')
	  }
	};
	var zutranslate = {
	  options: options,
	  panels: panels,
	  switcher: switcher,
	  gutenberg: gutenberg$1,
	  inacive: pluginInacive ? simpleMarkdown$1(inacive$1, {
	    br: true,
	    links: qtxUrl
	  }) : false
	};

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	// WordPress dependencies
	var _lodash = lodash,
	    get = _lodash.get,
	    map = _lodash.map,
	    castArray = _lodash.castArray,
	    join = _lodash.join,
	    includes = _lodash.includes,
	    without = _lodash.without;
	var __ = wp.i18n.__;
	var _wp$components = wp.components,
	    Button = _wp$components.Button,
	    CheckboxControl = _wp$components.CheckboxControl; // BaseControl,

	var useCallback = wp.element.useCallback; // Zukit dependencies

	var _wp$zukit$components$1 = wp.zukit.components,
	    ZukitDivider$1 = _wp$zukit$components$1.ZukitDivider,
	    ZukitPanel$1 = _wp$zukit$components$1.ZukitPanel; // , AdvTextControl

	var _wp$zukit$utils = wp.zukit.utils,
	    simpleMarkdown = _wp$zukit$utils.simpleMarkdown,
	    getExternalData = _wp$zukit$utils.getExternalData;
	var blockEditorKey = 'zutranslate_blockeditor_options';
	var supported = getExternalData('supported', {});

	function contentAtts(atts) {
	  var comment = __('Content attributes:', 'zu-translate');

	  return simpleMarkdown("".concat(comment, "`").concat(join(castArray(atts), '` `'), "`"));
	}

	var ZutranslateBlockEditor = function ZutranslateBlockEditor(_ref) {
	  var data = _ref.data,
	      options = _ref.options,
	      updateOptions = _ref.updateOptions;
	  var blockEditorOps = get(options, blockEditorKey, {});
	  var excludedBlocks = get(blockEditorOps, 'excluded', []);
	  var resetRules = useCallback(function () {// resetOptions([
	    // 	`${blockEditorKey}.add_rewrite`,
	    // 	`${blockEditorKey}.rewrite`,
	    // 	'tag_rewrite',
	    // 	'category_rewrite'
	    // ], () => ajaxAction('zumedia_flush_rewrite')); resetOptions, ajaxAction
	  }, []);
	  var excludeBlock = useCallback(function (checked, block) {
	    var excluded = get(blockEditorOps, 'excluded', []);
	    if (checked) excluded = without(excluded, block);else excluded.push(block);
	    updateOptions(_defineProperty({}, "".concat(blockEditorKey, ".excluded"), excluded));
	  }, [blockEditorOps, updateOptions]);
	  return /*#__PURE__*/React.createElement(ZukitPanel$1, {
	    id: "gutenberg",
	    options: options,
	    initialOpen: true
	  }, /*#__PURE__*/React.createElement("div", {
	    className: "__note"
	  }, simpleMarkdown(data.note, {
	    br: true
	  })), /*#__PURE__*/React.createElement("h3", {
	    className: "__subtitle"
	  }, data.blockTitle), /*#__PURE__*/React.createElement("div", {
	    className: "__supported"
	  }, map(supported, function (_ref2, key) {
	    var name = _ref2.name,
	        atts = _ref2.atts;
	    return /*#__PURE__*/React.createElement(CheckboxControl, {
	      key: key,
	      label: name,
	      help: contentAtts(atts),
	      checked: !includes(excludedBlocks, key),
	      onChange: function onChange(value) {
	        return excludeBlock(value, key);
	      }
	    });
	  })), /*#__PURE__*/React.createElement(ZukitDivider$1, {
	    bottomHalf: true,
	    size: 2
	  }), /*#__PURE__*/React.createElement("div", {
	    className: "__flex __right"
	  }, /*#__PURE__*/React.createElement(Button, {
	    isSecondary: true,
	    className: "__plugin_actions __auto magenta",
	    label: data.resetAll,
	    icon: "image-rotate",
	    onClick: resetRules
	  }, data.resetAll)));
	}; // <ListInputControl

	// WordPress dependencies
	// const { isFunction } = lodash;
	// const { useCallback } = wp.element;
	// Zukit dependencies
	var _wp$zukit$render = wp.zukit.render,
	    renderPage = _wp$zukit$render.renderPage,
	    toggleOption = _wp$zukit$render.toggleOption;
	var _wp$zukit$components = wp.zukit.components,
	    ZukitPanel = _wp$zukit$components.ZukitPanel,
	    ZukitDivider = _wp$zukit$components.ZukitDivider; // const { simpleMarkdown } = wp.zukit.utils;
	var optionsData = zutranslate.options,
	    gutenberg = zutranslate.gutenberg,
	    inacive = zutranslate.inacive; // switcher,

	var ZutranslateEdit = function ZutranslateEdit(_ref) {
	  var title = _ref.title,
	      options = _ref.options,
	      updateOptions = _ref.updateOptions;

	  // const onNotifyChange = useCallback(value => {
	  // 	updateOptions({ notify: value })
	  // }, [updateOptions]);
	  if (inacive) {
	    return /*#__PURE__*/React.createElement("div", {
	      className: "__note"
	    }, inacive);
	  }

	  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ZukitPanel, {
	    title: title
	  }, toggleOption(optionsData, options, updateOptions), /*#__PURE__*/React.createElement(ZukitDivider, null)), /*#__PURE__*/React.createElement(ZutranslateBlockEditor, {
	    data: gutenberg,
	    options: options,
	    updateOptions: updateOptions
	  }));
	};

	renderPage('zutranslate', {
	  edit: ZutranslateEdit,
	  panels: zutranslate.panels
	});

})();
//# sourceMappingURL=zutranslate.min.js.map
