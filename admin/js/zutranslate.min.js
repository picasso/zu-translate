(function () {
  'use strict';

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  // WordPress dependencies
  var _ = lodash; // Zukit dependencies

  var _wp$zukit$utils = wp.zukit.utils,
      externalData = _wp$zukit$utils.externalData,
      getExternalData = _wp$zukit$utils.getExternalData;
      _wp$zukit$utils.toJSON;
      var simpleMarkdown$1 = _wp$zukit$utils.simpleMarkdown;
      _wp$zukit$utils.getColorOptions; // Internal dependencies
  externalData('zutranslate_settings'); // перед вызовами 'getExternalData' нужно один раз вызвать 'externalData'

  var supportedData = getExternalData('supported', {});
  var pluginInacive = getExternalData('disabled', {});
  var qtxUrl = getExternalData('qtxlink', '');

  _.keys(supportedData); // _.castArray(blockName);

  // WordPress dependencies
  // const { map, has } = lodash;
  var __ = wp.i18n.__; // Internal dependencies
  // 'Customization & settings for Language Switcher.'

  var inacive = __('This plugin only *complements* the functionality of the **qTranslate-XT** plugin.\nThe [qTranslate-XT]($link1) version `3.10 or above` should be installed and activated (now it **was not found** among active plugins).', 'zu-translate');

  var options = {
    flags: {
      label: __('Show flags in buttons?', 'zu-translate'),
      help: __('Display country flag on language switching buttons in admin mode.', 'zu-translate')
    },
    gutenberg: {
      label: __('Support qTranslate-XT for WordPress Block Editor', 'zu-translate'),
      help: __('Only blocks known to this plugin will support switching languages in the Block Editor.', 'zu-translate')
    },
    media_details: {
      label: __('Add Language Switcher in Media Details?', 'zu-translate'),
      help: __('When activated you will not be able to edit the fields when viewing the modal dialog, only on `Edit Media` page.', 'zu-translate')
    } // NOTE: not yet restored after refactoring
    // yseo: {
    // 	label: 	__('Include additional support for Yoast SEO Plugin?', 'zu-translate'),
    // 	help:	__('The Yoast SEO should be installed and activated.', 'zu-translate'),
    // },

  }; // NOTE: not yet restored after refactoring

  var switcher = {
    ls_frontend: {
      label: __('Swither on Front-End?', 'zu-translate'),
      help: __('???', 'zu-translate')
    },
    ls_menu: {
      label: __('Swither in Menu?', 'zu-translate'),
      help: __('The switcher should be added in menu to be displayed.', 'zu-translate')
    },
    ls_display: {
      // [
      // 	'lang' 	=> 'Language Name',
      // 	'code' 	=> 'Language Code',
      // ],
      label: __('Display in Menu', 'zu-translate'),
      help: __('How the language will be dispayed in menu', 'zu-translate')
    } // custom_css: {
    // 	label: 	__('Use plugin CSS?', 'zu-translate'),
    // 	help:	__('If switched off the plugin stylesheet won\'t be loaded.', 'zu-translate'),
    // },

  };
  var gutenberg = {
    blocks: __('Supported blocks', 'zu-translate'),
    compress: __('Compress language data to reduce page size', 'zu-translate'),
    // themeOptions: [
    // 	{ value: 'light', label: __('Light Theme', 'zu-translate') },
    // 	{ value: 'dark', label: __('Dark Theme', 'zu-translate') },
    // ],
    resetAll: __('Reset All Rules', 'zu-translate')
  };
  var panels = {
    gutenberg: {
      value: true,
      label: __('Block Editor Support', 'zu-translate'),
      // Это позволит исключить эту панель когда значение option is false
      depends: 'gutenberg'
    },
    switcher: {
      value: false,
      label: __('Language Switcher', 'zu-translate')
    }
  };
  var zutranslate = {
    options: options,
    panels: panels,
    switcher: switcher,
    gutenberg: gutenberg,
    inacive: pluginInacive ? simpleMarkdown$1(inacive, {
      br: true,
      links: qtxUrl
    }) : false
  };

  // WordPress dependencies
  var _lodash = lodash,
      get = _lodash.get;
  var _wp$components = wp.components,
      BaseControl = _wp$components.BaseControl,
      Button = _wp$components.Button,
      ToggleControl = _wp$components.ToggleControl;
  var useCallback = wp.element.useCallback; // Zukit dependencies

  var _wp$zukit$components$1 = wp.zukit.components,
      ZukitDivider$1 = _wp$zukit$components$1.ZukitDivider,
      ZukitPanel$1 = _wp$zukit$components$1.ZukitPanel,
      AdvTextControl = _wp$zukit$components$1.AdvTextControl;
  var simpleMarkdown = wp.zukit.utils.simpleMarkdown;
  var besKey = 'zumedia_folders_options';

  var ZutranslateBESupport = function ZutranslateBESupport(_ref) {
    var data = _ref.data,
        options = _ref.options,
        updateOptions = _ref.updateOptions,
        resetOptions = _ref.resetOptions,
        ajaxAction = _ref.ajaxAction;
    var folderOps = get(options, besKey, {});
    var resetRules = useCallback(function () {
      resetOptions(["".concat(besKey, ".add_rewrite"), "".concat(besKey, ".rewrite"), 'tag_rewrite', 'category_rewrite'], function () {
        return ajaxAction('zumedia_flush_rewrite');
      });
    }, [resetOptions, ajaxAction]);
    return /*#__PURE__*/React.createElement(ZukitPanel$1, {
      id: "gutenberg",
      options: options,
      initialOpen: false
    }, /*#__PURE__*/React.createElement("div", {
      className: "__note"
    }, simpleMarkdown(data.note, {
      br: true
    })), options.folders && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ToggleControl, {
      label: data.add_folders_rewrite,
      help: simpleMarkdown(data.add_folders_rewrite_help, {
        br: true
      }),
      checked: !!folderOps.add_rewrite,
      onChange: function onChange() {
        return updateOptions(_defineProperty({}, "".concat(besKey, ".add_rewrite"), !folderOps.add_rewrite));
      }
    }), folderOps.add_rewrite &&
    /*#__PURE__*/
    // use <BaseControl> here to separate the label from the text control and allow 'flex' to align the boxes
    React.createElement(BaseControl, {
      label: data.folders_rewrite,
      id: "folders-rewrite-text-control"
    }, /*#__PURE__*/React.createElement("div", {
      className: "__flex __rules"
    }, /*#__PURE__*/React.createElement(AdvTextControl, {
      value: folderOps.rewrite || '',
      onChange: function onChange(value) {
        return updateOptions(_defineProperty({}, "".concat(besKey, ".rewrite"), value));
      }
    }), /*#__PURE__*/React.createElement("div", {
      className: "__tag"
    }, /*#__PURE__*/React.createElement("span", null, "^", /*#__PURE__*/React.createElement("i", null, folderOps.rewrite), "/([0-9]+)/?")), /*#__PURE__*/React.createElement("div", {
      className: "__rule"
    }, /*#__PURE__*/React.createElement("span", null, "index.php?post_type=", /*#__PURE__*/React.createElement("i", null, "attachment"), "&", /*#__PURE__*/React.createElement("i", null, folderOps.rewrite, "_id"), "=$matches[1]"))))), options.folders && (options.add_tags || options.add_category) && /*#__PURE__*/React.createElement(ZukitDivider$1, {
      bottomHalf: true,
      size: 2
    }), options.add_tags && /*#__PURE__*/React.createElement(BaseControl, {
      label: data.tag_rewrite,
      id: "tag-rewrite-text-control"
    }, /*#__PURE__*/React.createElement("div", {
      className: "__flex __rules"
    }, /*#__PURE__*/React.createElement(AdvTextControl, {
      id: "tag-rewrite-text-control",
      value: options.tag_rewrite || '',
      onChange: function onChange(value) {
        return updateOptions({
          tag_rewrite: value
        });
      }
    }), /*#__PURE__*/React.createElement("div", {
      className: "__tag"
    }, /*#__PURE__*/React.createElement("span", null, "^", /*#__PURE__*/React.createElement("i", null, options.tag_rewrite), "/([^/]*)/?")), /*#__PURE__*/React.createElement("div", {
      className: "__rule"
    }, /*#__PURE__*/React.createElement("span", null, "index.php?post_type=", /*#__PURE__*/React.createElement("i", null, "attachment"), "&", /*#__PURE__*/React.createElement("i", null, "tag"), "=$matches[1]")))), options.add_category && /*#__PURE__*/React.createElement(BaseControl, {
      label: data.category_rewrite,
      id: "category-rewrite-text-control"
    }, /*#__PURE__*/React.createElement("div", {
      className: "__flex __rules"
    }, /*#__PURE__*/React.createElement(AdvTextControl, {
      id: "category-rewrite-text-control",
      value: options.category_rewrite || '',
      onChange: function onChange(value) {
        return updateOptions({
          category_rewrite: value
        });
      }
    }), /*#__PURE__*/React.createElement("div", {
      className: "__tag"
    }, /*#__PURE__*/React.createElement("span", null, "^", /*#__PURE__*/React.createElement("i", null, options.category_rewrite), "/([^/]*)/?")), /*#__PURE__*/React.createElement("div", {
      className: "__rule"
    }, /*#__PURE__*/React.createElement("span", null, "index.php?post_type=", /*#__PURE__*/React.createElement("i", null, "attachment"), "&", /*#__PURE__*/React.createElement("i", null, "category"), "=$matches[1]")))), /*#__PURE__*/React.createElement(ZukitDivider$1, {
      bottomHalf: true,
      size: 2
    }), /*#__PURE__*/React.createElement("div", {
      className: "__flex __right"
    }, /*#__PURE__*/React.createElement(Button, {
      isSecondary: true,
      className: "__plugin_actions __auto magenta",
      label: data.resetRules,
      icon: "image-rotate",
      onClick: resetRules
    }, data.resetRules)));
  };

  // WordPress dependencies
  // const { isFunction } = lodash;
  // const { useCallback } = wp.element;
  // Zukit dependencies
  var _wp$zukit$render = wp.zukit.render,
      renderPage = _wp$zukit$render.renderPage,
      toggleOption = _wp$zukit$render.toggleOption;
  var _wp$zukit$components = wp.zukit.components,
      ZukitPanel = _wp$zukit$components.ZukitPanel,
      ZukitDivider = _wp$zukit$components.ZukitDivider; // const { simpleMarkdown } = wp.zukit.utils;

  var ZutranslateEdit = function ZutranslateEdit(_ref) {
    var title = _ref.title,
        options = _ref.options,
        updateOptions = _ref.updateOptions;
    var optionsData = zutranslate.options,
        gutenberg = zutranslate.gutenberg,
        inacive = zutranslate.inacive; // switcher,
    // const onNotifyChange = useCallback(value => {
    // 	updateOptions({ notify: value })
    // }, [updateOptions]);

    if (inacive) {
      return /*#__PURE__*/React.createElement("div", {
        className: "__note"
      }, inacive);
    }

    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ZukitPanel, {
      title: title
    }, toggleOption(optionsData, options, updateOptions), /*#__PURE__*/React.createElement(ZukitDivider, null)), /*#__PURE__*/React.createElement(ZutranslateBESupport, {
      data: gutenberg,
      options: options,
      updateOptions: updateOptions
    }));
  }; // <ListInputControl
  // 	strict="email"
  // 	label={ notify.label }
  // 	inputLabel={ notify.input }
  // 	help={ notify.help }
  // 	value={ options.notify }
  // 	onChange={ onNotifyChange }
  // />


  renderPage('zutranslate', {
    edit: ZutranslateEdit,
    panels: zutranslate.panels
  });

})();
//# sourceMappingURL=zutranslate.min.js.map
